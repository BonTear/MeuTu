
import youtube_dl
import youtube_dl.utils

import os
import pyperclip
import base64
from pathlib import Path

from threading import Thread
import threading

from tkinter import *
from tkinter import filedialog as fd

from googleapiclient.discovery import build
import googleapiclient.errors

from time import sleep as s

# Soft-Black-1 (BG): #141414
# Soft-Black-2 (BG): #1B1B1B

font_fam = 'Bluestar-Regular'
if_all_file_exist = 0
line_count_for_logger = 1
ask_to_open_folder = f'{os.getcwd()[:2]}/'

check_emoji = '✔'.strip('\t'+' ')

downloader_thread_event = threading.Event()
downloader_thread_event.clear()

brain = Tk()
brain.geometry('454x210+450+250')
brain.resizable(False, False)
brain.overrideredirect(True)
brain.title('MeuTu')

# Window Icon
icon_byte="""AAABAAUAEBAAAAEAIABoBAAAVgAAABgYAAABACAAiAkAAL4EAAAgIAAAAQAgAKgQAABGDgAAMDAAAAEAIACoJQAA7h4AAAAAAAABACAA2S0AAJZEAAAoAAAAEAAAACAAAAABACAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/48AB/+PAEn/jwCo/48A5P+PAPv/jwD7/48A5P+PAKj/jwBI/48AB/+PAAAAAAAAAAAAAP+OAAD/jwAA/48AGP+PAJL/jwDv/48A//+PAP//jwD//48A//+PAP//jwD//48A7v+PAJL/jwAY/48AAP+RAAD/jwAA/48AGf+PALH/jgD//o0A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48AsP+PABj/jwAA/48ABv+PAJP/jwD/9JUc/+yiQ//1kRP//48A//+PAP//jgD/+4sA//2NAP//jwD//48A//+PAP//jwCS/48ABv+PAEr/jwDt/48B//rPmf/8/Pz/9s2Y//2QBv//jwD/+JUW/+2zaf/uo0P//I4C//+PAP//jwD//48A7f+PAEn/jwCo/48A//+PAP//xXz///37//7w3v/+mx3//4wA//23Xf/+/v//+/Dj//uhLv//jgD//48A//+PAP//jwCn/48A5P+PAP//jwD//5QL//+yUP//3rX//58l//+NAP//oi3//+bH///69P//sU3//40A//+PAP//jwD//48A4/+PAPz/jwD//48A//+PAP//jQD//71q//+gJv//jgD//48A//+XE///xHn//7BN//+NAP//jwD//48A//+PAPv/jwD8/48A//+PAP//jwD//44A//66Zv/2nCr/+IoA//yMAP/+iwD//6pC//+uR///jQD//48A//+PAP//jwD7/48A5P+PAP//jwD//48A//+OAP/+w3r/89q7/+7Ahv/srV3/7Jw1//OvWf//rkj//40A//+PAP//jwD//48A4/+PAKn/jwD//48A//+PAP//jQD//8V7/////////////v7+//v38v/68OT//7BN//+NAP//jwD//48A//+PAKf/jwBL/48A7v+PAP//jwD//44A//+fJP//wnb//9Wg///lxf//8+T///ny//+wS///jQD//48A//+PAO3/jwBK/48ABv+PAJP/jwD//48A//+PAP//jgD//40A//+PAv//lA3//54j//+qPf//mBT//48A//+PAP//jwCS/48ABv+PAAD/jwAZ/48Asv+PAP//jwD//48A//+PAP//jwD//48A//+OAP//jQD//48A//+PAP//jwCx/48AGf+PAAD/jgAA/48AAP+PABn/jwCT/48A7/+PAP//jwD//48A//+PAP//jwD//48A//+PAO//jwCT/48AGf+PAAD/jgAAAAAAAAAAAAD/jwAA/48AB/+PAEr/jwCp/48A5f+PAPz/jwD8/48A5f+PAKn/jwBJ/48AB/+PAAAAAAAAAAAAAOAHAADAAwAAgAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAAwAMAAOAHAAAoAAAAGAAAADAAAAABACAAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/48AB/+PADv/jwCL/48Ayv+PAO7/jwD9/48A/f+PAO7/jwDK/48Aiv+PADv/jwAH/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+QAAH/jwAy/48AoP+PAOr/jwD+/48A//+PAP//jwD//48A//+PAP//jwD//48A/v+PAOr/jwCf/48AMf+PAAH/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/48ABv+PAGX/jwDi/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A4f+PAGT/jwAG/48AAAAAAAAAAAAAAAAAAP+PAAD/jwAG/48Aef+PAPT/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPT/jwB3/48ABf+PAAAAAAAA/48AAP+MAAD/jwBm/48A9P+PAP/8jAD/9okA//qLAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD0/48AZP+OAAD/jwAA/48AAP+PADP/jwDh/48A//yNAP/pli3/5q1l/+WbPf/1iwX//48A//+PAP//jwD//48A//6OAP/7jAD//Y4A//+PAP//jwD//48A//+PAP//jwD//48A4P+PADL/jwAA/48ABv+PAKD/jwD//44A//uYGf/45Mn///////v07f/vsF///Y0A//+PAP//jwD//Y4A/+uOGP/jmj3/548f//iLAf//jwD//48A//+PAP//jwD//48A//+PAJ//kAAG/48APf+PAOn/jwD//44A//+gJ///9Ob////////////64sX//JQP//+PAP//jwD/+pQS//TXsv/8+fX/9ubT/+6jRP/+jgD//48A//+PAP//jwD//48A//+PAOn/jwA7/48AjP+PAP//jwD//48A//+SBv//z5L///37///////+8uL//p0h//+OAP//jgD//6Is///16v////////////rbtP/9kQj//48A//+PAP//jwD//48A//+PAP//jwCK/48Ay/+PAP//jwD//48A//+OAP//lQ///7NU///dsv//8uL//58k//+OAP//jwD//5UN///brv/////////////r0v//lxP//44A//+PAP//jwD//48A//+PAP//jwDJ/48A7/+PAP//jwD//48A//+PAP//jwD//40A//+aHP//37f//6An//+OAP//jwD//44A//+bHP//wnb//+XF///q0f//mBT//44A//+PAP//jwD//48A//+PAP//jwDt/48A/f+PAP//jwD//48A//+PAP//jwD//48A//+SCP//053//6Eo//+OAP//jwD//48A//+OAP//jQD//58l///brv//mRb//44A//+PAP//jwD//48A//+PAP//jwD8/48A/f+PAP//jwD//48A//+PAP//jwD//48A//+SCP/+05z//J4o//6NAP//jwD//48A//+PAP//jwD//5YR///TnP//mRf//44A//+PAP//jwD//48A//+PAP//jwD8/48A7/+PAP//jwD//48A//+PAP//jwD//48A//+SB//81aP/6KZT/+WLGP/qhwn/8IcB//aJAP/7iwD//pUR///TnP//mRf//44A//+PAP//jwD//48A//+PAP//jwDu/48Ay/+PAP//jwD//48A//+PAP//jwD//48A//+SBv//3rb/+/fz//fo1f/x1rT/68GN/+asY//kmj3/5pYw//nSof//mRf//44A//+PAP//jwD//48A//+PAP//jwDK/48AjP+PAP//jwD//48A//+PAP//jwD//48A//+SBv//37b////////////////////////+/f/8+PL/+e/j//3myf//mBX//44A//+PAP//jwD//48A//+PAP//jwCL/48APf+PAOr/jwD//48A//+PAP//jwD//48A//+PAf//y4r///ny///+/f/////////////////////////////r0///mBT//44A//+PAP//jwD//48A//+PAOn/jwA8/48AB/+PAKH/jwD//48A//+PAP//jwD//48A//+PAP//lQ7//6Y1//+2Wv//yIP//9qs///qz///9en///78///q0f//lxP//44A//+PAP//jwD//48A//+PAJ//jwAG/48AAP+PADT/jwDi/48A//+PAP//jwD//48A//+PAP//jwD//44A//+NAP//jgD//5AE//+XE///oiv//7FP//+wTP//kQX//48A//+PAP//jwD//48A4f+PADP/jwAA/48AAP+IAAD/jwBn/48A9f+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//40A//+NAP//jwD//48A//+PAP//jwD0/48AZf+MAAD/jwAAAAAAAP+PAAD/jwAG/48Aev+PAPX/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPT/jwB5/48ABv+PAAAAAAAAAAAAAAAAAAD/jwAA/48ABv+PAGb/jwDj/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A4v+PAGX/jwAG/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+QAAH/jwAz/48Aof+PAOv/jwD+/48A//+PAP//jwD//48A//+PAP//jwD//48A/v+PAOr/jwCg/48AMv+QAAH/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP97AAD/jwAA/48AB/+PAD3/jwCN/48AzP+PAO//jwD9/48A/f+PAO//jwDM/48AjP+PADz/jwAH/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AA/APAADwDgAAcAwAADAMAAAwCAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAABAMAAAwDAAAMA4AAHAPAADwD8AD8AKAAAACAAAABAAAAAAQAgAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+PAAT/jwAq/48Abf+PAK3/jwDZ/48A8/+PAP3/jwD9/48A8/+PANn/jwCs/48AbP+PACn/jwAE/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+PAAT/jwA4/48AmP+PAN//jwD7/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD7/48A3/+PAJf/jwA3/48AA/+PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/5EAAP+PAAD/jwAa/48Aiv+PAOr/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOr/jwCJ/48AGv+PAAD/kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+QAAD/jgAA/48ANv+PAMP/jwD+/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP7/jwDC/48ANf+PAAD/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/kAAA/48AAP+PAEL/jwDZ/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDY/48AQf+PAAD/jwAAAAAAAAAAAAAAAAAA/5AAAP+PAAD/jwA3/48A2f+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDY/48ANv+PAAD/kAAAAAAAAAAAAAD/jwAA/48AG/+PAML/jwD//48A//+PAP/0iAD/6IIA/+yEAP/5iwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDB/48AGv+PAAAAAAAA/48AAP+QAAP/jwCL/48A//+PAP//jwD/9YoD/+GbQf/nuoL/5K9t/+GNI//3iwD//48A//+PAP//jwD//48A//+PAP//jwD//Y4A//yNAP/+jgD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwCJ/48AAv+PAAD/jwAA/48AOf+PAOr/jwD//48A//+OAP/1pD3/+vHl//////////7/9OHK/+uXLP/+jgD//48A//+PAP//jwD//48A//aKAP/hhAz/3YYY/+ODCf/2iQD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOn/jwA3/48AAP+QAAP/jwCZ/48A//+PAP//jwD//40A//7Bdf//////////////////////9MuY//uOAv//jwD//48A//+PAP/+jgD/6pkz//DUsv/259P/7s+n/+OXN//5iwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAJf/jwAD/48AK/+PAN//jwD//48A//+PAP//jQD//7RV///8+f/////////////////86tT//JcX//+OAP//jwD//48A//6QBf/61af/////////////////9uXQ//KXI///jgD//48A//+PAP//jwD//48A//+PAP//jwD//48A3v+PACr/jwBv/48A+/+PAP//jwD//48A//+PAP//lQ///9Wi///+/P/////////////z5f//nyX//44A//+PAP//jwD//5MK///ivv/////////////////+/v//+blp//+NAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD7/48AbP+PAK7/jwD//48A//+PAP//jwD//48A//+OAP//lhH//7hg///YqP//+vT///Tn//+fJv//jgD//48A//+PAP//jgD//8N3///+/f/////////////////+yoj//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwCs/48A2/+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jQD//5AF///FfP//8+T//6Am//+OAP//jwD//48A//+PAP//lRD//8qI///x4f///Pn////////Liv//jgD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PANn/jwD0/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//6Aq///pzv//oCj//44A//+PAP//jwD//48A//+OAP//kAT//50h//+3Xv//8+X//8yM//+OAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A8/+PAP7/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+OAP//nSH//+bI//+gKP//jgD//48A//+PAP//jwD//48A//+PAP//jgD//40A///NkP//zY7//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD9/48A/v+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//44A//+dIv//5sj//6Eo//+OAP//jwD//48A//+PAP//jwD//48A//+PAP//jQD//8R8///Mjf//jgD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP3/jwD0/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//50i//zlyP/rlij/7oQA//WJAP/6jAD//o4A//+PAP//jwD//48A//+NAP//xXz//8yN//+OAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A8/+PANv/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+OAP//nSH//ezX/+vGl//ip13/3pY6/92JHv/ggwz/5oIC/+yEAP/ziAD/+YoA//3EfP//zI3//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDZ/48Ar/+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//44A//+dIP//8eH///////7+/P/89vD/9+rZ//HYuf/qw5L/5K1p/9+aQ//diiH/7b+H///Mjf//jgD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAKz/jwBv/48A/P+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//50g///x4f///////////////////////////////////v7//fn0//nt3//68uj//8uL//+OAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD7/48Abf+PACz/jwDg/48A//+PAP//jwD//48A//+PAP//jwD//48A//+OAP//mhv//+7a////////////////////////////////////////////////////////y4r//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAN//jwAr/5AAA/+PAJn/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+QBP//vm3//+XF///x4f//+vX////+///////////////////////////////////Liv//jgD//48A//+PAP//jwD//48A//+PAP//jwD//48AmP+PAAP/jwAA/48AOv+PAOr/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAf//lAz//50h//+qQP//u2f//82Q///fuP//7dj///jv///+/P///////8qI//+OAP//jwD//48A//+PAP//jwD//48A//+PAOn/jwA4/48AAP+PAAD/jwAD/48AjP+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//40A//+NAP//jgD//5IH//+aGf//pjX//7ZZ///Fff//pjf//44A//+PAP//jwD//48A//+PAP//jwD//48Aiv+PAAP/jwAAAAAAAP+PAAD/jwAc/48AxP+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//44A//+OAP//jQD//40A//+OAP//jwD//48A//+PAP//jwD//48A//+PAML/jwAb/48AAAAAAAAAAAAA/48AAP+PAAD/jwA4/48A2v+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDZ/48AN/+PAAD/kAAAAAAAAAAAAAAAAAAA/5AAAP+PAAD/jwBE/48A2v+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A2f+PAEL/jgAA/5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+OAAD/jwA4/48AxP+PAP7/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A/v+PAMP/jwA3/44AAP+QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/5AAAP+PAAD/jwAc/48AjP+PAOv/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOv/jwCL/48AG/+PAAD/kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+PAAD/jwAE/48AOf+PAJr/jwDg/48A/P+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A+/+PAOD/jwCZ/48AOP+PAAT/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/kAAA/48ABP+PACv/jwBv/48Ar/+PANz/jwD1/48A/v+PAP7/jwD0/48A2/+PAK//jwBv/48AK/+QAAT/kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/gAH//gAAf/wAAD/4AAAf8AAAD+AAAAfAAAADgAAAAYAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABwAAAA+AAAAfwAAAP+AAAH/wAAD/+AAB//4AB/ygAAAAwAAAAYAAAAAEAIAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+NAAD/gwAA/48ADv+PADj/jwBv/48ApP+PAMz/jwDn/48A9/+PAP3/jwD9/48A9/+PAOf/jwDM/48Ao/+PAG7/jwA3/48ADf+eAAD/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/5AAA/+PACn/jwB0/48Avf+PAOn/jwD8/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPz/jwDp/48AvP+PAHP/jwAo/5AAA/+QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+PAAL/jwAv/48Akf+PAOL/jwD+/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP7/jwDh/48AkP+PAC7/jgAC/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+PAAD/kAAA/48AF/+PAH3/jwDj/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOL/jwB8/48AFv+PAAD/kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+PAAH/jwA8/48AwP+PAP3/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD8/48Avv+PADv/jwAB/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/48ABP+PAF//jwDj/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOL/jwBd/48ABP+PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+PAAD/jwAG/48Acv+PAPH/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDw/48AcP+QAAX/kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+PAAT/jwBz/48A9P+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A8/+PAHD/jwAE/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/5UAAP+PAGD/jwDx/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPD/jwBe/40AAP+PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+OAAD/jwAA/48APf+PAOP/jwD//48A//+PAP//jwD//48A//uNAf/ziQL/8ogC//iMAf/+jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDh/48AO/+PAAD/kAAAAAAAAAAAAAAAAAAAAAAAAP+PAAD/jwAY/48AwP+PAP//jwD//48A//+PAP//jwD/84kB/9t8A//UfAz/1H0N/9d7Bf/mggH/+40B//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48Avf+PABb/jwAAAAAAAAAAAAAAAAAA/48AAP+QAAH/jwB//48A/v+PAP//jwD//48A//+PAP/7jAD/3oUT/+Swb//x1bP/8ti5/+m/i//akjb/4oEE//2OAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//Y4A//yOAP/+jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A/f+PAHz/jgAA/48AAAAAAAAAAAAA/48AAP+PADH/jwDi/48A//+PAP//jwD//48A//+PAP/1jAb/7cSQ//79/P/////////////////57+L/4qVZ/++HAf//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//uNAf/ngwH/3HwB/9t8Af/jgAH/9IkB//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOH/jwAu/48AAAAAAAD/jwAA/48AAv+PAJP/jwD//48A//+PAP//jwD//48A//+OAP/7oC7//PPo////////////////////////////+Oze/+iXMP/+jQD//48A//+PAP//jwD//48A//+PAP//jwD//Y4A/+KBBP/YjC3/4adf/+KqY//alDv/134N/+2FAf//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwCQ/5EAAv+QAAD/jwAA/48AKv+PAOL/jwD//48A//+PAP//jwD//48A//+NAP//q0P///v2//////////////////////////////////HDif/6jAD//48A//+PAP//jwD//48A//+PAP//jwD/9YoB/+SnWv/57d7///79///+/v/89e7/7cuh/9yLJf/1iQD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDg/48AKP+PAAD/jwAA/48Adf+PAP//jwD//48A//+PAP//jwD//48A//+OAP//oCn///Pk//////////////////////////////////nix//6kw///48A//+PAP//jwD//48A//+PAP//jgD/+Jkg//np1v////////////////////////////DVs//qjBX//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48Ac/+PAAD/kAAP/48Avv+PAP//jwD//48A//+PAP//jwD//48A//+PAP//kQX//9CX//////////////////////////////////3w4f/9nCL//44A//+PAP//jwD//48A//+PAP//jQD//6xG///79/////////////////////////////78+//wsWP//Y0A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48Au/+QAA7/jwA6/48A6v+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//5wf///et////v7////////////////////////16f//oSr//44A//+PAP//jwD//48A//+PAP//jQD//6k9///58v/////////////////////////////////51KX//Y8D//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A6f+PADf/jwBy/48A/P+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//44A//+ZGP//wXT//+G8///05//////////////16f//oSr//44A//+PAP//jwD//48A//+PAP//jgD//5cT///kw//////////////////////////////////+4sD//5ML//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A/P+PAG7/jwCn/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+OAP//jgD//5MJ//+lNP//37j////////16f//oSr//44A//+PAP//jwD//48A//+PAP//jwD//44A//+uSv//8+X/////////////////////////////5MP//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAKP/jwDP/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+NAP//oCj//+7b///26///oSr//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAf//rET//962///27P///fv/////////////5MP//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAMz/jwDq/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//9GZ///37f//oSr//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//5QM//+jL///t1///+jM////////5MP//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOf/jwD5/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8iE///27P//oSr//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+OAP//jQD//6U2///06P//5cX//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPf/jwD+/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8eD///27P//oSr//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//5EH///fuf//5sf//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP3/jwD+/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8eD///27P//oSr//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//5AE///ar///5sf//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP3/jwD5/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8iD///27P/9oCr//44A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//5AE///br///5sf//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPf/jwDq/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8iD//z17P/ikiv/438A/+qEAv/yiAL/+IsB//yOAP/+jwD//48A//+PAP//jwD//48A//+PAP//jwD//5AE///br///5sf//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOf/jwDP/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8eD//359f/ls3T/2pM4/9aFH//UfQ7/1noF/9p7Av/hfwH/6IMC//CHAv/2iwH/+40B//6OAP//jwD//5EE///br///5sf//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAMz/jwCo/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8eC///////+/fz//Pbv//jp2P/y17f/6sKQ/+OsaP/cmEP/14kl/9R/Ev/Vegb/2XsC/99+Af/mggH/7ogF//rYr///5sf//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAKT/jwBz/48A/P+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8eC///////////////////////////////////+/v/9+PP/+e3f//Tdwf/syJz/5bJz/96eTf/YjCz/1YIZ//DUs///5sf//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A/P+PAG//jwA7/48A6v+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8eC//////////////////////////////////////////////////////////////////77+P/68eb/9eLL//rz6///5cT//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A6f+PADj/kAAP/48Avv+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//8eC////////////////////////////////////////////////////////////////////////////////////////5MP//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48AvP+PAA7/jwAA/48Ad/+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jQD//79w////////////////////////////////////////////////////////////////////////////////////////5MP//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48AdP+QAAD/jwAA/48AK/+PAOP/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jgD//58m///jwf//+vX///7+////////////////////////////////////////////////////////////////////////5MP//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDh/48AKf+PAAD/jwAA/48AAv+PAJT/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+YFv//qj///7pk///Mjv//3rX//+zW///37v///fz/////////////////////////////////////////////5MP//5QM//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwCR/5AAAv+PAAAAAAAA/48AAP+PADL/jwDj/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+OAP//jQD//40A//+OAP//kgf//5kZ//+lNP//tFf//8aA///Yqf//6Mz///Tn///8+P//////////////////48D//5ML//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOL/jwAw/48AAAAAAAAAAAAA/48AAP+OAAH/jwCA/48A/v+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//44A//+OAP//jQD//44A//+QBP//lhL//6Aq//+vS///wHL//9Kc///hvP//vGr//48B//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A/v+PAH7/kAAB/48AAAAAAAAAAAAAAAAAAP+PAAD/kAAZ/48Awf+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//44A//+NAP//jQD//48C//+SCP//jwL//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48Av/+PABf/jwAAAAAAAAAAAAAAAAAAAAAAAP+QAAD/jwAA/48AP/+PAOT/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDi/48APf+PAAD/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/kAAA/5QAAP+PAGL/jwDy/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPH/jwBg/5YAAP+PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+QAAT/jwB1/48A9f+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A9P+PAHP/jwAE/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+OAAD/jgAH/48Adf+PAPL/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwDx/48Ac/+PAAb/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/5AABf+PAGL/jwDk/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOP/jwBg/48ABP+PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/5AAAP+QAAH/jwA//48Awv+PAP3/jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD9/48AwP+PAD3/jwAB/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+QAAD/jwAA/5AAGP+PAID/jwDk/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAOP/jwB//48AF/+QAAD/jwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/48AAP+PAAL/jwAx/48Alf+PAOT/jwD+/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP7/jwDj/48Ak/+PADD/kAAC/48AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/jwAA/48ABP+PACv/jwB3/48Av/+PAOv/jwD8/48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAP//jwD//48A//+PAPz/jwDq/48Avv+PAHX/jwAq/48AA/+PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+PAAD/jwAA/48AD/+PADv/jwBz/48AqP+PAM//jwDq/48A+f+PAP7/jwD+/48A+f+PAOr/jwDP/48Ap/+PAHL/jwA6/5AAD/+SAAD/kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAA//8AAP/4AAAf/wAA/+AAAAf/AAD/wAAAA/8AAP8AAAAA/wAA/gAAAAB/AAD8AAAAAD8AAPgAAAAAHwAA+AAAAAAfAADwAAAAAA8AAOAAAAAABwAAwAAAAAAHAADAAAAAAAMAAIAAAAAAAQAAgAAAAAABAACAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAABAACAAAAAAAEAAIAAAAAAAQAAwAAAAAADAADAAAAAAAMAAOAAAAAABwAA8AAAAAAPAAD4AAAAAB8AAPgAAAAAHwAA/AAAAAA/AAD+AAAAAH8AAP8AAAAA/wAA/8AAAAP/AAD/4AAAB/8AAP/4AAAf/wAA//8AAP//AACJUE5HDQoaCgAAAA1JSERSAAABAAAAAQAIBgAAAFxyqGYAAC2gSURBVHja7d13nF1HfSjw75x773atVtWSK+6440InQGII5SXBIfAID0ggCSQQAhiMIcam2ME2rkBCebwQAjweKZCEkJAQOgRscGwHY+OGq2zL6itp+733zPvjrGxJlqyVtLvn3t35fj6yZJW7c2bP9N/MBEl7eHLkOrxXpldNtEiH5TILsAhH4lDBQtEC0cGyyV/TiwpqqIk6dvk1gnHUJ3/kGBJslRsUPDD5/5vl7sXdk7/ebMxamUGDGi6RC8WHJa0vfZda0QciT8VPdavplztUxaE4CMcJDhatFCxDH7rQgao4w2kLIpqYwBi2itYKVotW4Vas1nSfYJWGzTqM24A/S69bq0nfkbJdENmEJ6io6sfhcicKjhc8EUeJDhD077blbjXBuGiL4GHR7bhD9HPBLaJ7NG11o9wh+FB6BcuUcr8MV0XGdOi0WHCM4FTBkwXHiI7AgKhSdjKnWUOwSXCX6HbRdaIb5X5h2Ca96s5Jr+NsSzk+Gy6d7Jdn+lUcIfMUPEvwJBwq6jf/vhe5YLPoftyAH8r9xLh75IbA+fMtS2ZfyuGZcmksXvFuiwSn4Nmi5+IELEFWdhJbStAUrcPNgv8QXSu62aBBNdEF6VWdCSlXp9OVsZhrb1gkOF3F8/AcHD/ZyidTUbyVg7gZ3xV9Q9NNRgzqwLvTaztdUk5Oh6siTb0yJ8m8SPCrOGFyCS7ZX8Fm/EzuP/BV0e0yo85Or+/+Sjm4ry6O5DLdDp1s6c8SPQ2LpXydKVGwFtcI/lb0fQ2rVcRUGeyblGt749zIKXhIj5rT8DK8CEeIqmUnb14JJnAHvib6R9GNgvFUEeydlFtTcUnks3i9JYJfFbxC8CzRkrKTliBYh2/JfUnTt51ok+ulVYQpSDn0eC6Z7Ob3WiF3lsyrRaehs+ykJbs0KrgOn5X7V3dZq09MwUa7l3JmV66cXMLLHCnzMsErcZyoVnbSkikIJkQ/w+c0fcWo+3WKzk2v+85Sjmzv/MgawbGOVPEqvEqxySat2benJm4TfVbu7zTcpwNvT6/9Nikn4PLIAoxYKXg1XodjpYI/VzQFN4n+j+jLFlprtTRHYL5XAJdGlmKzJYKXyvyh6EnMuTj8BIIGrhN9UtNXDdhkNfM5ynB+Pvn7YrGDfkyXDi8QvBXPpE122yX7awzfw+VyP9BhwrX4wvwrDvPviS+PjMn0OV3wJ6KzSBF781IwiL+X+5imm1TE+TY/MH+e9vLJ7v5GK2R+X/CHokPKTlbSAoK78TF1n7XYhvk0PzA/nvLDkYYOFS8QvAtPm4P77ZP901AMCy4TfUdQnw9RhXN7lvviSIzkjlB1heDzomemwp/sQhVnCv6fzIWiA/3vyNkzfcZaueZuFXdZJOrW4SWCd+NkcQ4/bzJ9ghw/kbvYkH9XUfeeufnqzL2nujLSgzEHC87Fa9O23GQfbcRfarpat4dtNefOIphbT3NlpKmq5lcEF4qeMueeMZltueD7ON+4a1Tkc+nswrnxJB+Mxcn3DQOq3oB3ipaWnaxkDgkexOXGfVqHIQ/iivYvPu0/CXhR5D1oOk7Fp0V/lgp/Mu2ig/AhHT4hOszJOK39Jwjbuwq7OhZR3lUvFl2Ck8pOUjLnRcG1OF/uO0J7n0bUvim/KkKf4I8E7xQtLztJyTwSPCR3kYbPCUa8sz2LUnum+qORuuUq3offF9MBHUkpRgSfxEUY9Lb2K07tleKrJo/dzp2Ey/Cr5sI8RtK+ivsMvqTpvYozCrXTKkH7FJ6LImcj9wzBX+OFbZX+ZG4qokpfoeqzKs5Qs2142hbao6q6IhYZXfFywcU4vOwkJcljFJefnm29b+mRt0P0YOun8OpIVJP5A1yYlviSFveQ6DxNXxA0Wn040NqpuzpCx+SBHRekkN6kLQSb8H65T7T6rsLWTdklk9dt9ThX5hxRT9lJSpIpC4YUPdaPYKJVK4HWTNUVkdwiVe8T/JF0Dn/SjoIR0cXGXKXDqHe0XnFrvRQVE34DKv5M8IekK7eStjam2ENwqUrrBQy1VmquiDQNqLlosuVPhT+ZC8ZwhXGXCEa8q3WKXeukJLX8ydw2jsuMuFS1dSqB1gikuTQyolfF+1PhT+aoTrxTr7fp1DG5wlW68iuAqyOdOvQ5V/BGqfAnc1eXYvP6WzXUXFl+JVBuBbAtyCd4q8w7pIs5krmuWM6+QM0faqi4otxKoLwK4IrIiGwywu8CUW+pOZEks6UIaPuAmldbK7i0vEqgnArggshz0O1/KoIlUoRfMr9EiwUftNKZupS2gWj2pyIvi9TAM/B5HFHKkydJKwhuxmtVXW8VPjS7RXJ2ewBXxG0xfScJ/lwq/Ml8F50o+qgxRzsIL5/dnsDsVgABDQfgQ6LTZvVrJ0nreoaKD2ha6Jmz+4VnrwK4OhL0qXiv4jCPJEm2CV6O9xjT7fLZ6wXMTgVwZWSzMBne+/taKQIxSVpBVMWbdHilwxVzZbNg5iuACyMHYMCLJ0/vTTv7kmTXemXe7wHPna1SMrMt8WWxiOuLjpf5Ik6encdKkjYWfF/0aplVVpnRG4hmtgdQnOA7IHORVPiTZGqiZ+MiY/pm+raLmasAikm/bPKuvl+f2cdIkjkmeIVOrzUkzOR8wMz0LR7d6fQCwedFy2bsCZJkrgpW4RUy1xhnJg4TmckhwCGC96fCnyT7KDoEF6pbNlOzddNfAVweGdclOEf0tJnNoSSZ46JfkXmbcdWZGApMbwVw9WScf6ez8LpZyaAkmdsyvF6P5+vFh6a3EpjeCiBH7kjBu9IOvySZNssE5xm3crrjA6avArgy0lSTeSueNKvZk8wP0bZG5tEf5R+qM1ueKfMmTdl0Hic2PVMLj97a+xuCz4oGysmjZM6IHinc1UBfjf4OjhtgeR9ZYPMoN23gviGazP0A82Ct3Ctlvq1uWlYFpuf8vYiGFSremQp/slfijj9XMvprHNzNsj5OX8qxi3niIg7sZ3kP3TUE6g1WbeGLt/Lxm3h43NyuBKLlMufIXa9m83R85P5n1yWRnwtOc57gQrEFDhpNWtN2rTr0VFnYwWF9PKGfJwxw6lIOG+CwBQx001kh7OEtzSNfuZ03fYeHx8ztSoA6zlHzURN4+/497P71AC6MxTmnpzpD8IZU+JNHbFfYs0BXhYO6ObCPExdx+KKiZT9igAN6WdhJtbJvXyoLnHUst2zgfT8ppgbmsJrgj437puDn+/th+1d9XBaJunT6lOg1ZedMUoKduvAdk134RZ0cv4ijBjh5CYctKlr5JT30dBSFdrrdvoHnf5lVw+Z6L4DgY8acraK+P3MB+94D+ININ+peIDqr7PxIZsF2rXpAR4XlXcW4/An9nLyUYxYVP5b3sbSbrtrsJe+wfk5bwqohc78C4JU6fVnwnf35kH2vAI7DhKWTy35pzX+u2amw99dY2sWR/RzSz0mLOWYJhy/kgD76OqmVPADsqrF0vlwiHy3G2SZc7/K4ZV97AftWAVwa6cWIl+JZZedFsh+268IHVAI9NQ7t4dB+Tl7MoYs4cTGHLCxa9Znqwk+L+TULdaaaF6v6G5dFzt37b8q+VQBdGHGgzB+IZrGTl+yXnVr13mqxvn5IL0cOcNwijlvCwQs5vH/qs/BJaXoEb9TwTTXr9+UD9r4CeH8suv8/9yrR6WXnQLIbO83C91Q5sJsDejhhcTEDf9xkq758cha+to+z8Empni54iapP+0DkfXtXW+99BbAAP3O0iteabx2uVrSLQJqBGgd0c/TCoht/6jKO3DYL31sE0rRsFz7ZO8Xdmm8w4t/0emhv//neVQCXRp6K67xS0Q9IZtP2XfhAR2BZNyt6OWYhT1zMwQPFuH3lAhZ3ze4sfFKS6HQ1Z8l83JWRd0y9dt+7CqADP3a0zKvMh4WWMm1X2CuBBbViJv6YhcXa+omLOWJx0aof0Ef/fgTSJG2vgt9X9xU8uDf/cOoVwLbW/yd+C0eX/cRzxm5i4Q/qZllvEQv/xCWPxsIv7aG3lWfhk3IEJ6t6kcxfuiTyp1N7QaZeAXThOgcJfltMrf9+mWzdeyss7OIJfUUQy1EDnLSUQwf2LhY+2U6M5mXnNKoKXqvpn3RPfUVgahXARZEBbPQSmRPKftZ2FvKiG/+SI3jOQUVM/AG9qQufTIszBC9S9XkfirxrzxXh1CqAHmywVMWrJ68wSvbWZIv/6uN4xxkctTi17Mk0K27deo1R/yyb2nbhqS3jVRA8P93ou+/6qlz0VD78Kxy9JBX+ZMY8XcUvTTU8b88VwBWRuh7BK0j3+u2LKt5xCm8+Iy3LJTOuT/BydR2u2PPRYXuoACbv9qs5TUgx//sk55dXFoU/Rdols+T5Kk6eSv/+8f/KRbhewMtES8p+qna0oMqfnDqPdqklrWClzIt0Kw7rfRyPXwH04FSH4UVlP1FbisURV88+tOyEJPPQWUat2NOK6ONXAB3IPA9Hlv00bSnyvMOKtf4kmWUnqHiWPQw7d18BXBEZ14uzxD19TLIrfVWeuqLsVCTzUtQp9zKjOh/vSrHscf8kc3K6328fxcm99v1lJySZx56l5ujHi9zZdQVweeQABC8iTf7tq84avWnhNCnPgYIX6MfFu+4F7L4HsNpiwfPKfoJ21hWopYCfpDxB8EIb9O2upO/6t4ubV07DiWU/QZIk++VJqk7YXQjfYyuAS2Jx6k/F89INv0nS9paq+GUd7Oom1cdWAF3YYjGeU3bKkySZFs81ps+Vj/2Dx1YAAcEpOL7sVCdJMi1OExy/qwH/jr912eS+f54jSgtYSTI3LFPxVDV2jgnYsQKIWKNfTN3/JJkzInJnGtG5c2jwjhVAFVVHkE79SZI55lQVT3j8CqCGzFOl4J8kmWtWyJyw80EhjwYJXhLZrKbPM6ULP5IW0Myj4fHc+q11926qu3fdmKcf0ee4A7vLTlo76sCzvcU/2Bo5v+gKPFoBdKLDEsGT7PkgkSSZVo1mtHG4Ye3Whrs3jLt93bhb14y7ff2E9UN1D480yaMvvOKQVAHsu6e4ymLdNm77jUcrgKJCOBZp93oyo8bruU0jDfdvqrt/44Sb14y5c924W9eNW7O1aWsjN9LIH/n7WQhCoCtLZynul+AIwSHCzhXAJbHoAYx7kmhh2elM5oY8MjLetG644cGNE25ZN+H+9WNuWTfu3k11D25tGJ7I1WOUR7IsFGPPQHWnm0/iI/9J9sNSmVNkfurCyHvDZAXQiSEVHZ6cMjnZF808GhrLPbyl7p6NE25dO+bmNeNWb5pw52Dd4EjD5okoj5FACEEWiha9EkI6cGI2RBXBUzzs85YUJf3RIUCHfsExqQJI9mSikds40rRuS91dGybcvnbczQ+P+cX6CWtG6taO5CaauWYsCvi2LnyWkc3HW3taSXCcA3TJjbKtAijm/A8XHVF2+pLWESNj9dzG4Yb7NtXdv2Hcz9cWE3S3b5iwbqhh60TTSGOyVfdoy/5Idz5pLdHROExwG9sqgArqTpRNBgIn806eR0PjuXVDDfdtGHfLmgn3bRxz87oJDw5OeHCoYbQeNXY1Xq/MQqs+OXRI9tsy0REqj1QAsZhcCY5PZ//ND41mtHWsac228fqaMT9/eNx9gxN+saluy1jTlom8GA3O+nh9+zFoIFTESlWedchrnWI1nbC6X6IunIqvQdVlGNWl0xPT+H/uGavnNgw3rd1Sd9f6ovt+85oxd2+oWzdct3a0aaIZHzNer8xGq779CxcyMVTIamKlQ6x2yqtdYqWj+L1QkWeBSnpJ91twhDWCS2OsTg4CFuKostOV7LsYGZ3IrR+qu2djMV7/6ZrxIqhm/YSNIw1b67mx0sbr2wpu0ZWIWZWsKq90idXO4kelk6wqhkzq78+o4y2yCBurk3fVHyo4oOxUJVPTzKPhsaY1Qw33bphw69px964fd9PacQ9tqXtwS8NEHtVjFBWteqZo4Wd+vL6LLnxWKVr1yqMFPVZqYlYjpKnCWRcdhCWCjdXJqv8wQX8aArSeiUa0ZbThoS0N92wYd9uaMbeunfDA4IS7B+s2jTUNbTdezyZbdYHqjIfN7VjYY7ZdF37nwh4qqbC3jsWCIwV3VicjAA8Si1PDkvKMTuTWDzes2Vz383Xj7l437sbVYx7cXLdmuGHDWFOj9PH6ZBc+VKjU5JXO7Qr75Hg9K+6TT1pWj6y4NqzqHpkDHVd2iuarWx4add29w362dtwv1o+7bf2EzaNNm+u5enPbeP3RWfjZH69nYlYVs5pY7RC3jdkrHcU4Po3X21HAkQ6jaqma4MDU/S/HX1yz0ad+vKHY5LJdqx7M/ni9aNWrYtaxY2HPatsV9mROCI50h2pVbpHowLLTM181Anmgc9YKe/F1ts3CF0tuXWKlU17dNgtfTdvu5rpohTHdVZ2WC5alHsBcslMXPlSKibgdJua2jddTF36eWqHHsqpMP/rKTk2yr3YxXq/UthurbxuvVwgp0DOZFAyoWlQVDQhSfGXL29WSW3W7Jbeu7ZbcUhc+2aNeQV9VcBRpCbC1bD9eLwr7jrPwHZNRc2nJLdlnHVhaFRwiPt4N4smMilGY3I316Hi949Hue3XnqLlU2JNpUcPRVSxME4AlqnWJPcs0OiZb9qwjLbklMy+qyKyophuAS9a1mAWZZirvyWyL+jPRwWWnI0mSUvRmsnQKcJLMS9FBWRoCJMk8lenP0Ft2OpIkKUV3RjoHMEnmpagvY+f7QpMkmSc6UgWQJPNXyNJJQEkyb1VS+EmSzGOpAkiSeSxVAElbSS/s9Er5mbSNaqC7mnZDTqdUASRto6PCwu6yUzGnxEwwXnYqkmSPIr0dLE5xq9Mpz1AvOxVJskeRkxaxvKfshMwpMVUASdt47kH0pLC16TSeIS87FUmyJyu7OPMJZadijgmGMgyVnY4keVw5v3E4Jy4vOyFzzmgm2Fp2KpJktyKH9fL6U6imfavTK7c5kxssOx1JsjtdGeeczukry07JHBQ8mAkeKDsdc1VHJe222B+1yB+fxO+dIp2GPjNGqtIcwMyIHNBFd7pxYe9Feiu8+RTe87Q08z8jijtntlQFmxHFVMdOt+W9qQLYK5EQOX4R7z6Dlx9HZ8q/mdIUra7K3Stokm4Hmm5PXJQmrvYoFj8qgaP7edlRvO4kjlhcdsLmvDp+UcXdmJAqgGnVkXHaAWWnosXkRc+zmhUte1fGym5OWsKzD+ZXD+ewAbLUF50N49hQxWaMIQVZTpfIMQOckiqAR7r1izo5eTHPPJAnr2D5ArorrOhhSQ+11FOabcOioapo82QsQOp0TZfIiw/j4P6yE1JuHtRw3AC/fiS/dgTHL6U/XUTfGqJBdRurxqzVbS0OKztNc0LkoB5e9sSyE1Le89dw2lJedzy/fjQrFxBSt77VrDZkXVVmULA63RA8TSK/fTSnrSg7ISXIOaafN57EK44vCn7SooKHdRuruk/dMVaVnZ45IXLKYt502jwLAIrFFTP/64m8/ckctyzF7bS86A4rNaqOFzX8vOz0tL3I0g7e9zSOWFR2Ymb3uVd0cv5TeN0pKWinTeS41yBVDfCwYFzUWXbK2lV3hfOezG8cU3ZKZlHk0B4+/BxecmxavmsjI3IPC2RyNN0n2lJ2qtpSpCNw9mm8cT51/ScL/8d/hd98Yir8bWaD6G6R6uRgbZXgYdGyslPWViJLOjjnDN5yOl3zJZQqckBn0fL/j6PLTkyy14oNgOtFMg3UDYpuLztd7STknDjAp87knU+mZ74UfnRmnPcUzjq27JQk++hmyw1qkjk30GMCd5adqpYXkbO4yuuP5x9+g5c+cR51+xXP/7vH8vunpLX9thXdazPeFbaL/49uETSkPQGFyU0q22SBZV0872B+70Seecg83KkWedJizn0KvWm2vz0FY6L/3nYSaPEK5whuEWya9/MAeXEDzeIuTlzMqcuKgr+8h9NW8sQl87DgT+rMeMtpHJmCxtvZGsFdO1YADWTukblrXlYAk639og7OWM5vHlG08IcP0NeRurog5zkH85utvMwZPabnluwkuFO0alseFRVAcTvAkMwdeFrZaZxVOQf38D8OLyLZTl9Z3ECT7KizwutPYqCFN/PkMarXc6SthbsV3exaY84o/reoAEawSNOEn+A15kMkZ2Sgym8ey5tO4UkHpMM7dity+jKe2+LbxRrNaHgiJ6Rv5C4FDdF1noEHi98qKoDzA1dHohtlBkVzOpg1RJ6yrFjKeuERdMzTMf2URX7tcJa2+IkRI/Vo7UiDkGYod2Od6CZNfKho4x999XNEvxDcx9ytADrw8mP54DOK02eSPVvUyXMPKTsVe7Z5vOm+LY2yk9G6orvkO54C/ugK9ig22Ygby07nTOkNvPtUPn5mKvxTFjl2IccsKTshe7Zpa93oRD4fBrD76sdebnD7c8AfrQDODxyggR8Kc+++wO7Au0/jT59Bf9ryNHWRowdY1MKTf9vcuWHClok59+pOj2Ac/+mf8P5Ha8gdY9jqyP1EtLbs9E6nDrz9FM55Gl0tNjxshxWrIwfI2iDa8aaHRo032yFHSxA9pOmWne8C3/HbOo5x9+DmstM7bXJecRTvbMHCL8YiBqOF39lK4Kg2ONtwZDx33arR1P3fvRvU3ae542/uWAEELDMk+OacyMjIM5dz0bNY2IJd2DyaXLduXSHQ3QZxEfesH3fb+gmhHboqsy2Igm/rM7HzH+2YW38aGEZ0DW1+aWhkWSfnP711J/zqzWio3vqTVu0QCfm9XwxZPdwUshQDsAtrNP1IHe/a8Zv52OqyWA68SbsPAyKvPY7nH152QnZvrJ7bMNJo+Qogb+1OiqGxpn+9bYuGIGYpqGMXrhfcsas/eGwFsBX9BvHdslO9zyInDPCGU1p7q+7m8dy9m5v7/0EzKI9sHC07FY/v2ruH/eSBUZVKJUUB7qxoXL6rasTbH9vSPLZ4vC8U9wVH35i8OLTtZPi94zmqxXetDY02jbf4ECCP3DZYdip2b6ye+9z1m2yayKnUxDQE2NkauW/tbmF/1+1jHU034Wdlp36vRY5fWMT4t7qHt9SNNFu8f427N9SNtej6+g9+MeTf7hxSyYiVjtQD2Fn0X5putZsAyV1XAE0cZFDuP8pO/z48sBccxhMGyk7Int22fsKWeguvAULgZw8PeWBwvOyUPMaG4YYP/2C9wYmmEIJY7S47Sa0ml/u6pcZs3fVf2HUF8O7Aw+BfhMlftYm+WrHBp9VnrmPkjjVjxBZPaGDV4Ij/vHu47JTsIEY+c+1G3753WCULhEyspQpgJ6vwTZvwgV2/Z7ufIsuRuw0/LvsppiwWQSunLC87IXs2PN5048PjbXCedlRvNn3l5i2GxlpnwvK7d2z1kR+uVwT+RXmlU6ykGO+d/MC4u3aO/tve7iuAdwQ6jAr+Vni8j2ghkZOXsrgNGoIHByes2lyn0vpj1krgu/cO+84dW/f/w6bBzatHnfu11R4eaTxSf8aO3rQEuL1gTPBlfSZ2Xvvf3uMvkjUR/YD2OTL8Sctae+lvmxseGLV6OBda/qUNQgiGGtGf/3CDdVvL3W5774Zx7/jnh9y4Zqzo+kOoyjvbIF55NhX7/n+0p6Z7zxXAWz2Ar5X9PFPRXeHINngP8jz63l3DJnJtMWsds6pK4Af3j/jkD9drlLTh5ra1Y978Dw/6zj3Dqo8MnaK8o0eeJgB3FPyjPmv3tM/k8SuAcwIfRvRPgnVlP9OedFdZ0Vt2KvbsocG6H98/LFRrbbHNrlheK/aIX/2jDf7vDZtmPQ0/vnvIa/9mlX+/a0i2/bxJyDS7FhFaPx9n0SpN/2ZYUYYfx55zrThl9QZ8q+yn2lM6a4GeNti48oO7h9yxaUKodIhtcIBlrHQSMiEwVM9d8PWH/f1/D8pnoSMwMpH71I82eM3frnL9Q6PbtfwQ5bU+eceCsrOo1XzdhJ+bwmhtzxXA2wOZcbkvK84NammtPqc+Vs995eYtxpuotseZ47HaKVZqiLLAmuGmt/zzQz75w/UzFiCU59GN94/4g79b5R3/uto9WxqPjvm3pSuravYuS63/9oJN+IJudefu+d2a2gxUHcG3VP1E9Jyyn3E3D64ZGW/xI+FuuH/Ed+4dVqkEzWp7LFvFrCav9ao0xlCsXG4YbfrTf3/YjQ+OOuc5yxxzQNe01GV5Ht25dtznrt/ki/89aNXWuiwLKrv47Lx7ibzWBmO+2fV90Y+nesbE1CqADB02afq84BmiVjtaA4w2WTNSdip2r96MPnfDJhvGmqqVilhpwUMKdiPvXKgyNkgsWvwsMJZHf33jJj+8d9jvnrbIS09e6IilnSqVva8Jtow2/fSBEV+5eYt/um2L+zbXhRAe0+oXoryjX7O7DQ4qnE3FtV9fVDNqinFbU/9OXRVhheBfcHrZz7pLOR99Nn9yRtkJ2bVr7hn2W5+/z4bRBrVu9YHD22ftOuZqWx6QjQ/a+bXJY3HU+uEDNb90WI9fObrPSQd2O2hhTU9nRS3zyMRdjNFEk7GJ3LqhujvWjbv23hE/um/YT9eMGxxrCll4nPioKFa71fsPEavtU4HOiuB7ml4q2LirnX+7MvW3bxAnedgDPodTTWX+oAQ3rB7VzLt203KUZ2wi98kfrrd2pKGa0ax1t0/hp5ht71kq1IeFfMdxVhYQuHtz3S/+e9D//dlmy3oqDuypWtBTddSiqkWdxeuyeTx352DD0EjTutGG1cNN481cRCULe+g9RLHSqb7gwFT4d1YE631Gh43u3pt/tjeujHCYzL/ihLKf+THy6JTOtf7jNYss72+t5YAv37DJ6//xQcPNKKDRf3CxfNVmKiPrVIf2vD0kxuKqrkeGott+ER79KYSwF5HQUax0afQflMb9uxL8SO4srJtq68/etuINLHIfPksLHh0eors2jLj2vtaaCLhr7bgPfXedrfVcUKyrt+tL3OxeMqWKK4SiRa9u+1GZ/DH5/5Vsbwo/ea1PfeEhbZtvMyqoiz6jw7q9LZV7VwG8K7AJTX8n+GnZz/3YfIiGJ5r+/qebTTRaY5vt8HjTxd9c48a120JXo7zWO7ms1oZCptm3Qt41MAtfLBZfr3uJxsJD0nbf3fux6Csm7DHwZ2d7P45votN9or8UtM72sEmVjG/8Ysj37xra/w/bT41m9PHvr/d3N29+NHotZPKufq0fsbB7MatqLDhQs2fpZBzDdFe2xefltV71/oM1FqwUszatMGdaMC76lKp1Vu/9P9/7CuDcUFQCwZe02FbhKAghs36s6ervr7NxuLyggGYeffraDS75wXrjcVtxj/Jqz5zoxsZQ0eg7QH3BwdtNyO1vRVD8+1jt0uhbqbHwMHnnQu1cWc6CH8j9iwlcvvf5tG8z+U1k1oo+pbhOpDWEQFZRDXz77mGf/M/1mrMRr7qTRjP69LUbnfcfawzV8+3Guplm96K22AA0NZm8a0B94AkavQds10WPpl4ZTBb6UJF3LNBYcJD6wOGaPUvba5WkHFvlPqZq077WvftetV4RYZGK/4cXlp0T21SHVquMrBNjsKAjc9WvrfSaMxbPWsTt8HjuE/+5zsXfW79T4S/i1hsDh4lzpgLYUcjrwsSwrD4kq4+RTwh5cc78Tn9TzDKyqljplNd6xFqvvNqVwnr3zt8Y83sqRqcS9rsr+1csPhyJzhR8STRQdm5AZWxQdcsqFAEqy3oqLnnRSq86bWDGYwN+vnrMB7+1xldu3WIi3+mwnxDU+w+Z7NLOfSFvkteLmIG8IUz2CqLJgp9VyLad4pu6+Ptgrei3BP/p7H3Pv/3rYxXHhv1A1d/j9WXnCOS1LjGrCnlxWsy6kaa3f/Uh6zfXvf6ZSyzomv7Wd+Nww5duHHTVD9e7a9OE7DFLXFGzc2Be7VorCnilla89bF/FvOtf2+waPfv/UfvubZHDEJ0i82XRkWXnDVFt86odQlbzSEfg145d4O3PXub0w3qmpTewfqjh67dv9dc/2eiHq0bUo11sWikCWOoDh7ZV7H/SwoKfiV6Ce/an9S8+an9dFRnAFu8QXWp/exXTIBvfrLZ5le3HnlGx02xlb9VLj+/326cOOOmgHr2dezfmHJ3I3bF2zNdv3+qrt251w+ox4818p33q2wmZev9B8s6BsrMlmRvG8RZ9PmWD4gTv/TA9g68rItFiVX+HM8vOIbFZ9AImttjVxpUYo6VdFU86oMtzj+xzxiHdDl7UYaCnoqeWPdJ9b+bR0ES0aaTh3g3jbnxozDX3jLhp7Zg1I41H4tcfL3sbvcs0e5dPW1Yn81zwFU2vwVbv2P93anpa64gOG+UuF5wiWlpuJlUmN66MCHHHWKVi40qwcSL3jfuGfeu+YX21TF8ts6S3Ynl3RbVSTFlN1HMPjTRtGc1treeGJ6/xqoSw47FUu9HsXqzZs0wq/Mm0CB4QXapq63Qtvk/fm/mRCBXRn+HdrTD7Uxleqzq8Zo9/Lyo2rxQ/75jwLIQik8LeZVaze4lG3wFzaM0/KVlTcJ4Jl6uI09H6M91N00ciTQfJ/L3o6WXk0g5iU3XrapWx2TrEMj7S+2j0pKOqkmn1TbwS6/d34m970/uGTqDqQblLsXE2c2eXQkWjb8UsbbvddlDFwRq9y1PhT6bTQ3IXq1pvmre4TO9b+s5QzFFO+Br+0vTvEtmHJ6xqLFhZTMSFbAaSFMWsaPXrKXY9mW5BQ/Rxt/muTbhget+tmXlTr5g8Pqzqi6LnznQeTU2UjW9VGVkvqw8rKoJ9ffzJ+PWsJu9YIO9eLK9178fnJcluBF+V+x3B4HR2/beZmTX7DBUPi84X/K3ooBnOpikI8s5+sdYjm9giG9ssq4/wyCrB4x9F9cjfCZm82il2LNDs7J/cCZcKfjIDgrtFF6oYnKktdzP35l4RmZDp8Sf4kKi1zsCOuawxWmxeaYwKzXHyJjFOxq0Tw+Rhd1m1uH221i3WesRK12QMe5LMkGBY9Fa3+ytHiPu62WfPX2YmXR6JFqj5GF4zo19rv8Ri80psEnMh5ghFBRAqZNnkDr7U0iezIuIv1J2jYmK6lvx2ZWbDdjdhma2iC2SOFD1jRr/ePguTe8+L7Ch/5jKZ14JviS5VMzET4/4dv9RMOyZyLoacic+2xnxAkrSoYtz/aplrvHXmi+fML1bfMXmQ6Cd8S+6DaK0je5OkdQyK3iN3zWx1Q2cnWuWdoTgtoO6vBZ9sxcNEk6RUxcUeHzHoyybwttmZb5rdWa3iBKEBfAK/PatfO0laWfBpmbdhyFtmr1jObrzqdagY1PQ+wTWz+rWTpHV9S8OF6rNb+JntCuALgc3odIfoTwS3zOrXT5JWE9woeruK+2dyuW93Zn/HygWhuGIsul50Nh6a9TQkSSsI7sSbVd1U1tpzOVvWzg7FzsGHfFN0nmC29usmSatYq+lcNT8yzt5c6Dmdytuz+u7AClHDF/B+wdbS0pIks6lo8M6z1T8bUqySlZaUsl0dydVUvA3vF/f3oOMkaWFFQ/ceEz6uolnGuH975Z9acXYgU9f0EdElGCs7SUkyI4IhfEDuk2rlF35aoQKgqARyEyZcicu10n2DSTIdgmF8QPRRmfpMx/hPVWtUAGwbB40ad6miEkg9gWRuKAr/hfiooD5bUX5TS1qruTzS1KPTu/FOpOt0kvZVFP73iz4qmGilwl8krxV9KFLXrc/ZOE/UW3aSkmSvFRN+HxD9OTO/tXffktiqro7QIXgrLhDNn5s1k/ZXLPW9T+6TQuuM+R+bzFZ2ZSSqqfpDRU26uOwkJckUrMV5cp8VNMoK8pmK1k3ZNldEmqpqXiW4GAeWnaQk2a3gTk3nGvJVnZr7e3nnzCe3HXwwMiKz1C8LPiw6sewkJcljBDfij1VcY0ypEX5TT3K7uCLSiabTRR+lVc8XTOahiO+IzlZxk3Fm6hTf6dY6cQB7ck6guM/jek2vxRcFjbKTlcxzQV3wV5peK7RX4S+S344+HAkWyp2PN5KWCZNSbMaHVVyJrbN9mMd0aL8Ub3NZJOpW80qZ94sOKTtJyTxSnN77Hlv9g6oJ57VnUWrPVG9zdSxuTa96Ni4SPavtnylpdbng26IL1FxrnFbY1LOv2jfl2yuChg7FhYJXiCl8OJkBwZDoM6JLRQ+1c8Hfpn0mAR/PLxDdb9ybcY5gVdlJSuaYosv/NrlzmBuFv3isuaTYQ5Dp8xTFkOCXkW7xTPZdsdL0b6IPGHSDHtG75k6xmTtPss17IysxYtnkOetvwNKyk5W0pdWijwn+QtVmN+H/zK0iM7eeZnuXRxqqujxPcD6eLs6RIU8y0xr4ntyfWe37BuTOn5tFZW4+1Ta/E3k6Rq2UeSP+SLSs7GQlLSx4EB8R/ZVgg1xpJ/bOzuPOB1dFclWZZ8ucI3oeamUnK2kp4/h3XCJ3HfK5MtH3eOb+E27zgchyjFoo+F3BH4uOnld5kDxWkOMW0V9o+qIOWz2Ay+bHazE/nnJ724KHguNUvAm/LVpSdrKSUqzDZ/AJG91ngdhOcfzTYX497faujFCTeSbejjNJdxLME1vxNdGfa/qxoOGc+VkU5udTb/PeyMEY1K/mxYI34amijrKTlsyAYAw/lPtzDd9QNeLtxR/MV/P3ybf3jshpWGuJ4Cy8QXQaqmUnLZkGwQR+IvqU3FdFg6q02gm9ZUg5sL3LYxEc3XSgmrPwB4ITxbRi0JaKgn+96NOif7bYOmu11X79mZZyYlcujmwUrLBS1YvxOpwu6iw7ackUBKP4CT4j969+yXpfw/vS676zlCOP56rIYmyyVPBC0e8oQov6yk5asgvBIL4v+oLcN62w0QPMpdj96ZZyZipeF/klbNCv4pcE/xPPxwopD8sW8aAiiOcLuFbVmHHm68z+3kg5tLeKuwo6ZE6UeTF+Eyek4cEsC8ZENwn+UdPXNNwqU2+Hk3hbScqtfXVZZEzQZ7mKZ8m9XPAs0Upz5ZyF1tNUtPbfF3xJ04/ca50VeE96lfdFyrXp8OHIuC41R+EFghfiVMUMQsrj/RFErBX9l9zX8Q11d+swMZc36cyWlIPT6eJYtFEd+lSdoOKX8VycjsVpO/IUFfH5a3E9viP3bblb3WfMIlyYXtvpknJyxkS+i//SJ3O8iqfKnanoGawgRRvuIBgXPYQbBN/W9CPRnWqGvTW9pjMl5exseGdkEEfrVHGozEl4Np4iOAJLxHkWdVgctbVOdBd+jB9oukXD/d5lwgvx9fR6zrSUw2X4QIRMn4WCQ2VOUVQGx01uUV42x042joJxrBHcKbpZdJ3oJk0PWG+LTO6S9DrOtpTjraDYopyp6RQdKjoSp072Dk4QHaiYUOzW+isMOUawQfAAbhbdi/8W3IVVGsZ1id6cXr+ype9Aq7o0kqvo1C9aKjhSZgWOFBwpWoEVggHF1WgdqIkzeApy8bY0UVecoDMsGsRqwcOiO3CP3Bq5u2XWq0+27in+viWl70o7+dPIPThV1ZhuPZapWiToU5x8fLRghWgB+kQHyfSjW9SnqCSCXR+VHhWtd8S4YAijcoOChzAs2CparbiJYb1oWN1GQ9bpMepOTTV8Mr1W7eL/A2zemNVaaCTkAAAAAElFTkSuQmCC"""

decoded_icon_byte = base64.b64decode(icon_byte)
appdata_location = os.environ['AppData']
meutu_folder = appdata_location + r'\MeuTu'
def aditional_file():
    if 'MeuTu' in os.listdir(appdata_location):
        if not 'icon_for_meutu.ico' in os.listdir(meutu_folder):
            with open(f'{meutu_folder}\icon_for_meutu.ico', 'wb') as iconf:
                iconf.write(decoded_icon_byte)
    else:
        os.mkdir(f'{appdata_location}\MeuTu')
        with open(f'{meutu_folder}\icon_for_meutu.ico', 'wb') as iconf:
            iconf.write(decoded_icon_byte)

aditional_file()
icon = meutu_folder + r'\icon_for_meutu.ico'
brain.iconbitmap(icon)

# Main Window Canvas
canvas = Canvas(
    brain,
    bg='#1B1B1B',
    width = 454,
    height = 230,
    borderwidth=0,
    highlightthickness = 0)
canvas.place(x=0, y=-11)

# Wave Image
wfb_1 = 'iVBORw0KGgoAAAANSUhEUgAAAcYAAAAqCAIAAACm8WwzAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHYSURBVHhe7dpBbuMwDAXQdK6R3P9kuUeGgLVsWqrzVcWZ9zbV4kOmVYOozX5cr9cLAAl/xk8A/pmWChCjpQLEaKkAMZnx1P1+H6sv3W63seJ9NR+G4nnonJVTOpzlufJXKkCMlgoQo6UCxPhXf4CYj8fjMZafaX7o/Q/HU+cdwvQrLz8ofupkTnSMKx7yzp7xDcvSw1z0O32FR6VTgxd/gBgtFSBGSwWI0VIBYkz8AWK+n/h/O+TqZA7xAd/GDZu3XPrnc5i6qR+YLWZdfjY8Vg3NbRftmU3uLbJMFVAW7Ty17cYavPgDxGipADFaKkCMlgoQY+IPEPPbE/9sMj6t61+3eSNlKlymbuqwtJh1+UXhqeRYNay4eie56MabyVLhseqZ2nlRwRtr8OIPEKOlAsRoqQAxxlMAOY8vVcMdq+c6mUM8uWvD/nXLVLgszZ+3mH74zZJ7iyyvED5RDV78AWK0VIAYLRUgRksFiDHxB8gZY6onOkOu+MisNJO7Nuxft0yFy9L8eYvph98subfI8grhE9XgxR8gRksFiNFSAWKMpwByxjfVJzpfZOPfd0szuWvD/nXLVLgszZ+3mH74zZJ7iyyvED5RDV78AWK0VIAYLRUg5HL5C55xtDI5gPcNAAAAAElFTkSuQmCC'
rendered_wav_1 = PhotoImage(data=wfb_1)
wfb_2 = 'iVBORw0KGgoAAAANSUhEUgAAAcYAAAAqCAYAAAApk/tkAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAH3SURBVHhe7dtBbuMwDADAdL+R/P9l+UcbLuwFgRSbikIlK5651IcSpGSnRC3m43q9fl4AgL/+bD8BgAeNEQASjREAEo0RAJJDDt/c7/ft6udut9t2xTuoPAM7z8LvW+Ez6u/Ia/boe/5jBIBEYwSARGMEgMQX/AEgaWqMLQe1PQe073og3Lqu2Wuq3Iddb+29uWfWPsPoz8zofBUr7EmY+bzNuI8r7JNXqQCQaIwAkGiMAJBojACQmEoFgORXp1KrE08jJ6WOnKt3Cquytl31PuzU3q4nbyXnO+erPgOj9yT05Aw9eUfvUZixT605vUoFgERjBIBEYwSARGMEgMRUKgAkH58P2/V/tU4w9Uw8jZyUGlVjNaZHZW276n3Y9cTPzB1m1R6xVZWc1Vp74qpa861Q465aa5gR27NHYUa9rXFepQJAojECQKIxAkBi+AYAshi++YlooC1af383Mu7ouar1hZ7YMDP+rLVXY8U9W2VtYbXYM9TrVSoAJBojACQaIwAkGiMAJKZSASDbhnBeap3sGTlBFCpxR89VrS/0xIaZ8WetvRor7tkqawurxZ6hXq9SASDRGAEg0RgBIDF8AwDZdtb4UusB5siD0lCJO3quan2hJzbMjD9r7dVYcc9WWVtYLfYM9XqVCgCJxggAicYIAP9cLl81AwODkbZFTQAAAABJRU5ErkJggg=='
rendered_wav_2 = PhotoImage(data=wfb_2)
wfb_3 = 'iVBORw0KGgoAAAANSUhEUgAAAcYAAAAqCAYAAAApk/tkAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAHvSURBVHhe7dtBTsNADAXQwjXa+5+s9wCMEmSpi3Y8YibTvLehC77sTEAWifm4Xq9fFwDg1+f2FQD4YTACQGIwAkBiMAJA8q/LN/f7ffv0utvttn16P63n8c5n8UzlZ2c3+9yqva90v/1uPzrDfd+9+7X6ixEAEoMRABKDEQAS/+APAMlbLd+01hv9Inh0f9UX5GH2S/LZvVfrR+2ebFWl5kr1KlY4kzD6XLLqGc261lH31KNUAEgMRgBIDEYASAxGAEhspQJA0jQYWzaCqptLPVtLrfVG91jpr0fl2na9tUO1fvW+7FbtvZrtyVUdvd4qZxKqvYaefkP1jFbrt5VHqQCQGIwAkBiMAJAYjACQ2EoFgOSQW6mjcj21Kkb1F3qyoXqN2czeZ+VnZFfKVbXWW6HHXbXXMCO7Yr+tPEoFgMRgBIDEYASAxPINAGRfL4oB2qL1+3cjc0evVe0v9GTDzPxZe69m5R6tcm1htewZ+vUoFQASgxEAEoMRABKDEQASW6kAkG1LOE+1bvaM3CAKldzRa1X7Cz3ZMDN/1t6rWblHq1xbWC17hn49SgWAxGAEgMRgBIDE8g0AZNu7xqdaX2COfFEaKrmj16r2F3qyYWb+rL1Xs3KPVrm2sFr2DP16lAoAicEIAInBCAB/LpdvPl8TK3PZqiMAAAAASUVORK5CYII='
rendered_wav_3 = PhotoImage(data=wfb_3)
wfb_4 = 'iVBORw0KGgoAAAANSUhEUgAAAcYAAAAqCAYAAAApk/tkAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAHySURBVHhe7dtBTgMxDAXQwjXa+5+s9wCMpshSJUocSBry3oYu+IqTqWSRMS/n8/ntBAB8ej1+AgAfNEYASDRGAEg0RgBIXt4+HJ+/dblcjk//y/V6PT793H89i2dSeS43Oz4f3+N7zuSxXc6odZ/+YgSARGMEgERjBIDEP/gDQPKnwzcrvNit1tia2+2lfqicbaicbzb7rHv2XVX9Ho82ss7RZzLjufeqntFqe22t11UqACQaIwAkGiMAJBojACSmUgEgaZpKbZnsqU4u9Uwtta7XU2NlrYpKfaHnHH9LT+3VbJi999H77slVrVDn6BorudDzHHqtttdR9bpKBYBEYwSARGMEgERjBIDEVCoAJKZSB005jcrc9JzjTXXt0Fv7rLXDrNqr2Z5c1eg6W3MzzrKSC5Ht0bPujL2uUK+rVABINEYASDRGAEgM3wBAFsM3PxENtEXr79+MzD37WtX6Qk82zMzvWns1K3dvlb2F1bI71OsqFQASjREAEo0RABKNEQASU6kAkB1DOA+1TvaMnCAKldyzr1WtL/Rkw8z8rrVXs3L3VtlbWC27Q72uUgEg0RgBINEYASAxfAMA2fGu8aHWF5gjX5SGSu7Z16rWF3qyYWZ+19qrWbl7q+wtrJbdoV5XqQCQaIwAkGiMAPDldHoHFZYa20wWM8oAAAAASUVORK5CYII='
rendered_wav_4 = PhotoImage(data=wfb_4)
wfb_5= 'iVBORw0KGgoAAAANSUhEUgAAAcYAAAAqCAYAAAApk/tkAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAH7SURBVHhe7dtRTgIxEAZg8Bpw/5NxD3TMYibBiJ2SlrLf9yIP/um0NJm4Ox5Pp9P1AAB8+9h+AgBfNEYASDRGAEg0RgBImoZvLpfL9umx8/m8fXpPLWcR3v08nq31fLM46978XlTOyV3+XfXOOc//G3Vf/cUIAInGCACJxggAiX/wB4DkJYdvVhgIaK1xxgv26jBAmD0Q0Fv7zL1X117ljvTUOXq9kXq+95XuzEyj7o9HqQCQaIwAkGiMAJBojACQmEoFgOR4/bJ9/lPr5FTPtNTIybXqWq25nvOoquzt5hn1VtevnG/2jHyP0fvuqfed11thb6H6vYeeesPoMwqjz6lSr0epAJBojACQaIwAkGiMAJCYSgWA5K2mUltzPVNOlbUqKvWF6t5uqvVmM2uflZ+RjVxVdb3RuYoV9hZ6sz1W2+uoej1KBYBEYwSARGMEgMTwDQBkMXzzH9FAW7T+/s3I3KuvVa0v9GTDzPxea69m5e6tsrewWnYP9XqUCgCJxggAicYIAInGCACJqVQAyLYhnIdaJ3tGThCFSu7V16rWF3qyYWZ+r7VXs3L3VtlbWC27h3o9SgWARGMEgERjBIDE8A0AZNu7xodaX2COfFEaKrlXX6taX+jJhpn5vdZezcrdW2VvYbXsHur1KBUAEo0RABKNEQB+HA6fWdAJ14SiN6EAAAAASUVORK5CYII='
rendered_wav_5 = PhotoImage(data=wfb_5)

wave_image_label = Label(canvas,
image=rendered_wav_1,
fg='#1B1B1B',
bg='#1B1B1B'
)
wave_image_label.place(x=-5,y=177,width=465, height=50)

def wav_animation():
    global wave_image_label
    while True:
        for img in [rendered_wav_2, rendered_wav_3, rendered_wav_4, rendered_wav_5, rendered_wav_1]:
            s(0.096)
            wave_image_label.configure(image=img)
Thread(target=wav_animation, daemon=True).start()

# Title Bar
title_bar = Label(brain, 
anchor=W,
fg='#ffffff',
background='#141414',
border=0
)
title_bar.place(x=0,y=0,height=26,width=454)

title_bit = 'iVBORw0KGgoAAAANSUhEUgAAAEYAAAAYCAIAAADIyBxUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGWSURBVFhH7VbrecMgDOwQXsnrsA3DsAu7pHohiUeLXbtt7M/3I7EOcegwIvlYbofH0hXwWLoC7mxpDTEpYliR8hxRDYFJ52INvowUY0AAi5+SMwNbCunFyClleeLvDKAHhSdSoOmnIJSVX82Cgs1roaU1ikiO+CZKBDHJOIIzHMPxcdQl2A5DtBIkbwvQkio0Dkq9PaMzTnpPRU/0K0u7UVmiAs1AKXcLw8Bew6NKkI5kljqjtIMQGrcWOktTBQ/qJasQRMIGA8Nt1DRsSHmkCW12p9cSnfxUwYOvB48+vWcGljSJqBJRMC/IGGrf97BU52hEE3YVhHgDS9hBQgBlvwMyyBFgXBCEgOhq22upVviRpV5RQgTcC9C22rdaDWBYEEeleMJOS43CCZYsIlTF1WMyZC5hOmdUk+aWvlU4ePD0mKVgWXAEUB4uWmLsJEIaXKj+kOYym3UFnSXT3qAwsKSCX1vCVZ1s0s00kiFDoOlG8GhW02tDoFMWtK3fodBbOgz+BwOQ+K/xC5b+G4+lK+B2lpblE4Ak+Jn9W1kbAAAAAElFTkSuQmCC'
title_image = PhotoImage(data=title_bit)
title_bar_label = Label(title_bar,
image=title_image,
fg='#ffffff',
background='#141414',
)
title_bar_label.place(x=1,y=-2)

# Window Move Function
def get_position(evn):
    xwin = brain.winfo_x()
    ywin = brain.winfo_y()

    rtp_x = evn.x_root
    rtp_y = evn.y_root

    xwin = xwin - rtp_x
    ywin = ywin - rtp_y

    def move_fun(e):
        brain.geometry('+{0}+{1}'.format(e.x_root + xwin, e.y_root + ywin))

    title_bar.bind('<B1-Motion>', move_fun)

title_bar.bind('<Button-1>', get_position)

# Save-As Folder Selection
def ask_to_opn():
    global line_count_for_logger
    global ask_to_open_folder

    empty_check = f'{os.getcwd()[:2]}/'
    downloads = os.environ['homedrive'] + os.environ['homepath'] + '\\Downloads'
    ask_to_open_folder = str(fd.askdirectory(title='Test',initialdir=downloads))

    if ask_to_open_folder.rstrip() != empty_check:
        if ask_to_open_folder == '':
            downloads = downloads.replace('\\', '/')
            ask_to_open_folder = downloads
            logger.insert(line_count_for_logger, f'📁 Save to {ask_to_open_folder}')
            logger.see(line_count_for_logger)
            line_count_for_logger += 1
        else:
            logger.insert(line_count_for_logger, f'📁 Save to {ask_to_open_folder}')
            logger.see(line_count_for_logger)
            line_count_for_logger += 1

# Folder to Save-As Button
save_as_dark = 'iVBORw0KGgoAAAANSUhEUgAAAF4AAAAWCAMAAAB+B9tdAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAGxQTFRFGxsbVFRUjY2Nt7e3xsbGm5ubcHBwKSkpfn5+YmJi////8fHxRkZGf39/1NTUqqqq8vLyY2Nj1dXV4uLi4+PjcXFxODg4U1NTx8fHqampnJycuLi46Ojo3Nzc/Pz8+/v7jIyMzc3NlZWVwcHBGIVOQQAAAeZJREFUeJztVNuSpCAMBdppeiMqILKoe5///8dJArTaM11TZe3T1uYBlZwckpOgEP+CSXVpXq76fPxNqS/PwnUDbK05yd5xeP/EOwBYJz3AeJI+QCD+J170qJzCOfYJYKr07vISj16JnkEIxYeg6fiOgM18feJIYHWhN/h4QNEWzDFK3pcjinTrSckF4IKVtzM5FKGaj9qH6S2i0Mv39MJyZy6ylmJ9Bide8WMSYgVYUb7mA/qVGAu9Aw/tdPS7PDjQxExpxJ4e15UhvE34oSGrYxYBkqj0S4iW0znw5/yh1wTz4pFeUYZARIHgGYwcqoe9oSsMJOmDPsZMrAco6sM9F7uJ841ienrrrFBsms/06LYppRzxHdpI8i6iC3fykZKiuYd0oP9BK46c1fonnx4cFjPsNB00tbwTNaJKmKiMrTXIKDTPJ/DlYjC3hK7DqEY6qTPcelfjkFhSiVZv9Fbxa+pAVhgVpvN8dvxx4yE0DYlznend/ypT6dr1LmlH+JI8x8kZfudBacsVKjBMUI3cVMkqLLz+KYpIk8OhbyFsk08zMvKNFOVawCvM1xGgbpYq8+DYhUKdpwod/kYmcoRB70BW7e+VwTN9t5EEJSam8lIcTE5qkp/9j+OniIw6+9/9b3/T3gDJRCCnTgvr/AAAAABJRU5ErkJggg=='
save_as_light = 'iVBORw0KGgoAAAANSUhEUgAAAF4AAAAWCAMAAAB+B9tdAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAGZQTFRFIiIiWVlZkJCQurq6yMjInp6edHR0MDAwgoKCZmZm////8fHxTExMg4OD1dXVra2t8vLyZ2dn1tbW4+Pj5OTkkZGRdXV1Pj4+rKysn5+fu7u76Ojo3d3d/Pz8j4+Pzs7OmJiYw8PDScDCaQAAAeRJREFUeJztVNtynDAMtVlnvRUGbOML0KZp//8nK8lmgU12MsPkKVM9mIuOjqUj2UJ8B5PNRb1c9fn4W9P8eBauFbC15iR7x+H9E+8AYJ30AONJ+gCB+J940RNLCufYE0Ba6d3lJR+9Ej2DEJE3QdP5HQGbkU8cCqyu9AYfDyj6BVPOJVqOKNKtJyVngAtW3k7kiIRSH7UP05tFpZfv6YXlzlzkWor1Bax4xY8kxAKwoHzqA/qFGCu9Aw9tOvpdGRxQuVAasafHdWEI/yb8oMjWMcu8aaWfQ7aczoG/5A+9JpgXj/SRMgQiCgQvYOSIPewNXWEgSR/0MSaxHhCpD/dc7CbOT4rp6a2zIrJp3tOj22ItJeIXtJnknUUX7uQjJUVzD+pA/0orjpzV+pV3Dw6LGXaaDppa3ok1YpVQURlba6hjmucT+HAxmFtCx2FsRqLvDLferXFILKlEqzd6G/lVdSBXGBWmy3x2/HHjITSKxLlO9O5/16l07XKXtCN8TZ7j5ARvZVDaeoQqDBNsRm6qZBVmXv9URaQp4dC3ELbJpxkZ+USKeizgL0zXEWD9Wassg2NnCnWeKnR4jSRyhEHvQDbuz5XBPX23kYQoElN5KQ4mU0zys/s4f4ooqLP37n/7SvsHrCUg2cNkaRAAAAAASUVORK5CYII='

save_as_image_d = PhotoImage(data=save_as_dark)
save_as_image_l = PhotoImage(data=save_as_light)

border_for_save_btn = Frame(canvas,background='#ffffff')
folder_to_save_as = Button(border_for_save_btn,
image=save_as_image_d,
bg='#1B1B1B',
fg='#ffffff',
activebackground='#1B1B1B',
activeforeground='#141414',
bd=0,
relief=FLAT,
command=ask_to_opn
)
folder_to_save_as.place(x=1,y=1,height=58,width=118)
border_for_save_btn.place(x=320,y=45,height=60,width=120)

def saveas_color_on_hover(e):
    global folder_to_save_as
    folder_to_save_as.configure(image=save_as_image_l, bg='#222222')
def normal_saveas_color(e):
    global folder_to_save_as
    folder_to_save_as.configure(image=save_as_image_d, bg='#1b1b1b')
def on_click_save_as_btn(e):
    global folder_to_save_as
    folder_to_save_as.configure(image=save_as_image_d)
def on_release_save_as_btn(e):
    global folder_to_save_as
    folder_to_save_as.configure(image=save_as_image_l)

folder_to_save_as.bind("<Enter>", saveas_color_on_hover)
folder_to_save_as.bind("<Leave>", normal_saveas_color)
folder_to_save_as.bind("<ButtonPress-1>", on_click_save_as_btn)
folder_to_save_as.bind("<ButtonRelease-1>", on_release_save_as_btn)

# Labels
label_bit = 'iVBORw0KGgoAAAANSUhEUgAAADEAAAA4CAYAAABUkxDUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAATdSURBVGhD7Vm9sqJMED27r3E3om5t3YhHMKKsksCQmJCARGNCYyKqMCQ2vAGBEPEIRLduKZHv4XcaBhUFxbX2Lrufp2rKsZm/nunuoQ/fXl5e9vjL8V39/tV4KjEUPJUYCv4HSug6LC9ClGWIogiepasHR+hs8yvQdQ9e5KFlyLvRrQQnyeIY/hjYBAE20OD4MXaRpRoAVrRDzDaZd/9K3uYOHMOBO31ciw4ldHiBw2UXWLo2FqsVFraLZcFHhot6zR9xiqIosP7MK8EfQrsS+hRjTSoFjuvL8SlKULXXt1KAfGVjNBpRyer/n8JDjq1bHn2ladcNmW7R7iNkGf3Ks3i+HThp1+Z38ty64jx3KGHBNOQ3Rax2/s10YJzZdS0z51xUYOK1lBowHB/xiT8d8Dov2yHe8NyN0u+aPiam7cOnvK274A4lVrBNEz9+2KzdhqFt4I5s2DZNzl1ygSI0uRVNaNyYgO0WqwXsIK1ktb2WyPEeLJGmc/gdE99nTnl/By7W75z+Noqlf9gU/WfpiEjro1bIRUF71TneQz7RhsrkbkOt9wiG9MChkDvO9VawxJe6faHGdSWKDT5UtR8sWvUVdIynexl2sQMsaa4HDdTJ9AjfrUrob68MpIIx5owacltLdLFu3c4WHbQXdBXCK+RV7D7zBQvzcXEIItfQVIJHGmW8hX3ZzwIpLzK5FzSjii4+b+fdjq8gKtx9bOrJp3yNYJh0eT1WonZoY0y5Ebo3V5uksPLVReozMjEUy+tO5NLjJYhIfVfO22lZkp7WZZbsK2yT/WxylEuZTGb7ZKue77f7sHzelCXhZD8LK8GW9Ub/MGELhW24D8/bnY0vY1V9OWa5rnrOy3J3ji274msp5gyLPU76S/AkCoaCpxJDwVOJoeCpxFDwVGIo+MeV6EGcDQXtSvQgzoaElhdAHV4Ww9EKJlojLMrEqk02HFyeRE/i7LdALGDHBCjzuG398aBjV36T0W+kdBNkyr/KVFeINWZ3LYSYPh2XGd9VpqSlX08lLokzWZiYmO/wQbFGEKyZkvuIL3bx2E6jd9HVYAYxf5nuukxrVasaRZoCThdJ3UGk1SneoUxClUYyRW3Iz9NNlUsmsxM5U0yKTlPT1nb1HExTJ7WMZcb8tExBVZ58nuJKmczCfcKxTvv1N6cGcaZjquiKJtG1QsyN1Mb1Dne1awNPW1vjXaZRxIHGEzkPiG1E2oM+cQtvjGiqehU6op0PQxuzhyDH+7qiTQxTaSFO3xHiu5W4mzgjOJF7wp7pnqtqN8CIWHU78j01FwXtZ3mq4vRFx2leKNGPOKtDrsxxIj/0ZZXRKBivsaw44s52JfhfMG8jq4tP5NwcGauLUD46Np2twfskCctWOXkNymfK2Q4k1ZGjmpQy1TdUzncks/Yh+zb4K3Hsk//JTK2FpeaaZCxZRcU5tXNQByWOc/UlzqpFXyrZ7HvRjuOHjDDVf1lePZ6aY9vcuG0SnqynXYm7eKcu4qz6gpr3Yv7lS9LcHdOJaVAFx3I5VqOfXIRVLe/5KeHryDPadSQfM4sleNfB9au6OVp038498ZtDbA0LUcxFr02M7AVWd4e96/giJZqo35HS4PFTEHydOdEXMpenwdd5of+LwIXddIZfxpNQHgqeSgwFTyWGAeA/EMqjGhjDOqkAAAAASUVORK5CYII='
label_image = PhotoImage(data=label_bit)
labels = Label(canvas,
image=label_image,
bg='#1B1B1B',
fg='#ffffff'
)
labels.place(x=0,y=40)

# Link Entry
lnk_entry_frame = Frame(canvas,background='#ffffff')
lnk_entry = Entry(lnk_entry_frame,
font=('calibri', 12),
bd=0,
highlightthickness=0,
insertbackground='#ffffff',
bg='#1B1B1B',
fg='#ffffff')
lnk_entry.place(x=1,y=1,width=262,height=21)
lnk_entry_frame.place(x=53,y=45,width=264,height=23)

def link_color_on_hover(e):
    global lnk_entry
    lnk_entry.configure(bg='#222222')
def normal_link_color(e):
    global lnk_entry
    lnk_entry.configure(bg='#1b1b1b')

def on_right_click_copy(e):
    if lnk_entry.get() == '':
        lnk_entry.insert(index=0, string=pyperclip.paste())

lnk_entry.bind("<Enter>", link_color_on_hover)
lnk_entry.bind("<Leave>", normal_link_color)

lnk_entry.bind("<Button-3>", on_right_click_copy)

# Main Logger
logger_frame = Frame(canvas, background='#ffffff')
logger = Listbox(logger_frame,
font=('calibri', 12),
activestyle='none',
selectbackground='#1B1B1B',
bd=0,
highlightthickness=0,
bg='#1B1B1B',
fg='#ffffff'
)
logger.place(x=1,y=1,width=262,height=100)
logger_frame.place(x=53,y=73,width=264, height=102)

def downloader():
    global downloader_thread_event
    global line_count_for_logger
    global ask_to_open_folder
    global check_emoji
    global if_all_file_exist

    while True:

        downloader_thread_event.wait()

        # Define Default Path
        empty_check = f'{os.getcwd()[:2]}/'

        # Save-As Path Selector
        location = ask_to_open_folder

        # Link Sanitization - 1
        link = None
        link = str(lnk_entry.get()).strip()

        # Link Input Check
        if link == '':
            logger.insert(line_count_for_logger, '❌ Link Not Selected')
            logger.see(line_count_for_logger)
            line_count_for_logger += 1
            downloader_thread_event.clear()
            continue
        
        # Folder Selection Check
        if location.rstrip() == empty_check:
            logger.insert(line_count_for_logger, '❌ Save-As Folder Not Selected')
            logger.see(line_count_for_logger)
            line_count_for_logger += 1
            downloader_thread_event.clear()
            continue
        
        # Single Video Downloader
        if 'watch' in link or 'youtu.be' in link:
            
            # If used Shared link
            if 'youtube.be' in link or 'youtu.be' in link:
                link = str('https://www.youtube.com/watch?v=' + link.split('/')[-1])

            # If a Mix Video
            if '&' in link:
                link = str(link.split('&')[0])

            # Id Seperator
            checker_id = str(link.split('=')[-1])

            # Live Error Checker and Unavailable Video Checkers

            while True:
                try:
                    api_service_name = "youtube"
                    api_version = "v3"
                    api_key = 'AIzaSyCC9iU8G29-YuVsfaxxyWXlfw223oRidM8'

                    youtube = build(api_service_name, api_version, developerKey=api_key)

                    request = youtube.videos().list(part="snippet",id=str(checker_id))
                    response = request.execute()
                    break
                except TimeoutError:
                    response = None
                    s(2)
                    continue
            
            try:
                if str(response['items'][0]['snippet']['liveBroadcastContent']) == 'live':
                    logger.insert(line_count_for_logger, f"❌ Live Stream Can't Be Downloaded")
                    logger.see(line_count_for_logger)
                    line_count_for_logger += 1
                    downloader_thread_event.clear()
                    continue
            except IndexError:
                logger.insert(line_count_for_logger, f'❌ Video is Unavailable')
                logger.see(line_count_for_logger)
                line_count_for_logger += 1
                downloader_thread_event.clear()
                continue

            # Options For Audio
            ydl_opts = {
            'format': '140',
            'outtmpl': location + '\\' + '/%(id)s.%(ext)s',
            'keepvideo': 'False',
            'socket_timeout':5,
            'quiet': 'True',
            'no_warnings': 'True'
            }

            single_vid_link = link.strip() # Link Sanitization - 2

            # Pre Video Info Extractor
            while True:
                try:
                    single_vid_info = youtube_dl.YoutubeDL(ydl_opts).extract_info(single_vid_link, download=False)
                    break
                except youtube_dl.utils.DownloadError:
                    s(1)
                    continue
            
            title = str(single_vid_info['title']) # Dynamic Video Title
            vidid = str(link).split('=')[-1] # Dynamic Video Id
            ext = str(single_vid_info['ext']) # Dynamic Video Extension 

            # File Name Sanitization
            if '\\' in title:
                title = title.replace('\\', '')
            if '/' in title:
                title = title.replace('/', '')
            if ':' in title:
                title = title.replace(':', '')
            if '*' in title:
                title = title.replace('*', '')
            if '?' in title:
                title = title.replace('?', '')
            if '"' in title:
                title = title.replace('"', '')
            if '<' in title:
                title = title.replace('<', '')
            if '>' in title:
                title = title.replace('>', '')
            if '|' in title:
                title = title.replace('|', '')

            # Pre File Existance Checker
            mp3_with_file_name = Path(f'{location}\\{title}.mp3')
            if mp3_with_file_name.exists():
                logger.insert(line_count_for_logger, f'♻️ File Already Exist')
                logger.see(line_count_for_logger)
                line_count_for_logger += 1
                downloader_thread_event.clear()
                continue
            
            # Download Initiation Logging
            logger.insert(line_count_for_logger, f'📥 Downloading {title}')
            logger.see(line_count_for_logger)
            line_count_for_logger += 1

            # Downloader Block
            err = False

            while True:
                try:
                    youtube_dl.YoutubeDL(ydl_opts).extract_info(single_vid_link)
                    break
                except youtube_dl.utils.DownloadError:
                    s(1)
                    continue
                except:
                    err = True
                    break
                    
            if err == True:
                err = False
                logger.insert(line_count_for_logger, f"❌ Video Can't be Downloaded")
                logger.see(line_count_for_logger)
                line_count_for_logger += 1
                downloader_thread_event.clear()
                continue

            # Id Titled MP3
            m4a_with_file_id = f'{location}\\{vidid}.{ext}'
            # Name Titled MP3
            mp3_with_file_name = f'{location}\\{title}.mp3'

            # Rename With Name Titled MP3
            if os.path.exists(m4a_with_file_id):
                os.replace(m4a_with_file_id, mp3_with_file_name)

            # Download Done Logging
            logger.insert(line_count_for_logger, f'{check_emoji} Downloaded {title}')
            logger.see(line_count_for_logger)
            line_count_for_logger += 1

        elif 'playlist' in link:
            playlist_id = str(link.split('=')[-1])

            # Playlist Link Extractor and Check for Private PlayList

            try:
                #=========================== Reset Block ===========================#
                api_service_name = "youtube"                                        #
                api_version = "v3"                                                  #
                api_key = 'AIzaSyCC9iU8G29-YuVsfaxxyWXlfw223oRidM8'                 #
                                                                                    #
                youtube = build(api_service_name, api_version, developerKey=api_key)#
                                                                                    #
                request = youtube.playlistItems().list(                             #
                    part = "snippet",                                               #
                    playlistId = 'PLxzfK8zA4FNBQzS84AK_0evLIdu0u-AhG',              #
                    maxResults = 5000                                               #
                )                                                                   #
                response = request.execute()                                        #
                #=========================== Reset Block ===========================#

                request = youtube.playlistItems().list(
                    part = "snippet",
                    playlistId = playlist_id,
                    maxResults = 5000
                )
                response = request.execute()

            except googleapiclient.errors.HttpError:
                logger.insert(line_count_for_logger, '❌ Playlist is not Public')
                logger.see(line_count_for_logger)
                line_count_for_logger += 1

                #================ Reset Block ========================#
                request = youtube.playlistItems().list(               #
                    part = "snippet",                                 #
                    playlistId = 'PLxzfK8zA4FNBQzS84AK_0evLIdu0u-AhG',#
                    maxResults = 5000                                 #
                )                                                     #
                response = request.execute()                          #
                #================ Reset Block ========================#

                downloader_thread_event.clear()
                continue
            
            public_err = False
            playlist_items = []
            while request is not None:
                try:
                    response = request.execute()
                    playlist_items += response["items"]
                    request = youtube.playlistItems().list_next(request, response)
                except googleapiclient.errors.HttpError:
                    #=================== Reset Block =====================#
                    request = youtube.playlistItems().list(               #
                        part = "snippet",                                 #
                        playlistId = 'PLxzfK8zA4FNBQzS84AK_0evLIdu0u-AhG',#
                        maxResults = 5000                                 #
                    )                                                     #
                    response = request.execute()                          #
                    public_err = True                                     #
                    break                                                 #
                    #=================== Reset Block =====================#

            if public_err == True:
                public_err = False
                downloader_thread_event.clear()
                continue

            playlist_url = []
            for t in playlist_items:
                playlist_url.append(f'https://www.youtube.com/watch?v={t["snippet"]["resourceId"]["videoId"]}')

            # Dublicate Excluder
            for ids in playlist_url:
                indi_vid_link = str(ids).split('=')[-1]
                indi_vid_link = f'https://www.youtube.com/watch?v={indi_vid_link}'
                if indi_vid_link not in playlist_url:
                    playlist_url.append(indi_vid_link)

            # PlayList Download Initiation Logging
            file_count_val = len(playlist_url)
            if file_count_val == 1:
                file_count = str(len(playlist_url)) + " File"
            elif file_count_val > 1:
                file_count = str(len(playlist_url)) + " Files"

            logger.insert(line_count_for_logger, f'📥📥 Downloading PlayList ({file_count})')
            logger.see(line_count_for_logger)
            line_count_for_logger += 1

            for link in playlist_url:
                # Id Seperator
                checker_id = str(link.split('=')[-1])
                
                # Live Error Checker and Unavailable Video Checker
                while True:
                    try:
                        api_service_name = "youtube"
                        api_version = "v3"
                        api_key = 'AIzaSyCC9iU8G29-YuVsfaxxyWXlfw223oRidM8'

                        youtube = build(api_service_name, api_version, developerKey=api_key)

                        request = youtube.videos().list(part="snippet",id=str(checker_id))
                        response = request.execute()
                        break
                    except TimeoutError:
                        response = None
                        s(2)
                        continue
                
                try:
                    if str(response['items'][0]['snippet']['liveBroadcastContent']) == 'live':
                        logger.insert(line_count_for_logger, f"❌ Live Stream Can't Be Downloaded")
                        logger.see(line_count_for_logger)
                        line_count_for_logger += 1
                        continue
                except IndexError:
                    logger.insert(line_count_for_logger, f'❌ Video is Unavailable')
                    logger.see(line_count_for_logger)
                    line_count_for_logger += 1
                    continue

                # Options For Audio
                ydl_opts = {
                'format': '140',
                'outtmpl': location + '\\' + '/%(id)s.%(ext)s',
                'keepvideo': 'False',
                'socket_timeout':5,
                'quiet': 'True',
                'no_warnings': 'True'
                }

                single_vid_link = link.strip() # Link Sanitization - 2
                # Pre Video Info Extractor
                while True:
                    try:
                        single_vid_info = youtube_dl.YoutubeDL(ydl_opts).extract_info(single_vid_link, download=False)
                        break
                    except youtube_dl.utils.DownloadError:
                        s(1)
                        continue
                
                title = str(single_vid_info['title']) # Dynamic Video Title
                vidid = str(link).split('=')[-1] # Dynamic Video Id
                ext = str(single_vid_info['ext']) # Dynamic Video Extension 

                # File Name Sanitization
                if '\\' in title:
                    title = title.replace('\\', '')
                if '/' in title:
                    title = title.replace('/', '')
                if ':' in title:
                    title = title.replace(':', '')
                if '*' in title:
                    title = title.replace('*', '')
                if '?' in title:
                    title = title.replace('?', '')
                if '"' in title:
                    title = title.replace('"', '')
                if '<' in title:
                    title = title.replace('<', '')
                if '>' in title:
                    title = title.replace('>', '')
                if '|' in title:
                    title = title.replace('|', '')

                # Pre File Existance Checker
                mp3_with_file_name = Path(f'{location}\\{title}.mp3')
                if mp3_with_file_name.exists():
                    logger.insert(line_count_for_logger, f'♻️ File Already Exist')
                    logger.see(line_count_for_logger)
                    if_all_file_exist += 1
                    line_count_for_logger += 1
                    continue

                # Download Initiation Logging
                logger.insert(line_count_for_logger, f'📥 Downloading {title}')
                logger.see(line_count_for_logger)
                line_count_for_logger += 1
                
                # Downloader Block
                err = False

                while True:
                    try:
                        youtube_dl.YoutubeDL(ydl_opts).extract_info(single_vid_link)
                        break
                    except youtube_dl.utils.DownloadError:
                        s(1)
                        continue
                    except:
                        err = True
                        break
                        
                if err == True:
                    err = False
                    logger.insert(line_count_for_logger, f"❌ Video Can't be Downloaded")
                    logger.see(line_count_for_logger)
                    line_count_for_logger += 1
                    downloader_thread_event.clear()
                    continue

                # Id Titled MP3
                m4a_with_file_id = f'{location}\\{vidid}.{ext}'
                # Name Titled MP3
                mp3_with_file_name = f'{location}\\{title}.mp3'

                # Rename With Name Titled MP3
                if os.path.exists(m4a_with_file_id):
                    os.replace(m4a_with_file_id, mp3_with_file_name)
                
                # Download Done Logging
                logger.insert(line_count_for_logger, f'{check_emoji} Downloaded {title}')
                logger.see(line_count_for_logger)
                line_count_for_logger += 1

            # PlayList Download Done Logging
            if if_all_file_exist == file_count_val:
                logger.insert(line_count_for_logger, f'{check_emoji}{check_emoji} All File Exist')
                logger.see(line_count_for_logger)
                line_count_for_logger += 1
            else:
                logger.insert(line_count_for_logger, f'{check_emoji}{check_emoji} PlayList Downloaded')
                logger.see(line_count_for_logger)
                line_count_for_logger += 1

        else:
            logger.insert(line_count_for_logger, f"❌ Link is Not Valid")
            logger.see(line_count_for_logger)
            line_count_for_logger += 1
            downloader_thread_event.clear()
            continue

        downloader_thread_event.clear()

downloader_thread = Thread(target=downloader,daemon=True).start()

# Submit Button
submit_bit_dark='iVBORw0KGgoAAAANSUhEUgAAAG4AAAAVCAMAAACQYCvLAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAG9QTFRFGxsbODg4fn5+jY2NqampxsbGcHBwKSkpY2Njt7e3////RkZG8fHx8vLyVFRUuLi4qqqqf39/4+Pj1dXVx8fHnJyccXFx4uLiU1NT1NTU+vr6j4+Purq6wMDAgICAm5ubtbW1YmJir6+v+fn5lZWVHbeabgAAAjFJREFUeJztVF132yAMhRAHKmxsYxs367bu6///xukKHNtJT9o87KnjHIMMV7pwJVDqUzR9MMfqaE76UT9TGXsfYk/msA/rnmhpx4cIfU0N1ff5AkdttxMdTzT89SZyHz7OZmsiPVD/Lt24+Z+YLI1CZAei+R1xNi0hUEfdQ3Ry2EynHA/ZWz/fo9Wy2CLQlIP5Fa/tFnhFh1+z0IH7zIOrYXi2BqymmioVasiGfzfnxQaBRl5XveAl7zArM9OE47M97+lwoOpCx9GIXbiPnEgv/KMymNXcafzPUlSVrE0qUpL1IUrRmOIKioSiiHs6iypJCx1GjxKI1sYSstApgYCpB3OeGAM1VguIA3UquxYBmam5FlP5dlzFxGid6Isa2tHFhS7DsvLncriECq8lNVMpjyCFcE0nbaHDhsTdiKR+KyaLaHd0XyBWyjcpiI7qRVxXusVWwN3Q2Ut0I7qEtNKNqGCX6ZpLjyr8Ks6a8erbhuL7xtb7+1zoUCNOUpwVOdQrHVdR9UqXrOXakTs+yCiHoY2AP+SKZbunN8TkRwkPDuLMFielFt0zavEkL123iumODR9v/im7Y7zH8IunankUz775DdSr2HN3Q8dp5/hQRzbJeXFe8kLDKL0LuuQuA0zKuBagGgBdViZx/yN2L/b+LZ6y41gU7pGWFhDbYgt+oNjZAhzyEDn5gffRmEIvO1X88EanTEODV31EKSWxr5oPYfts6Y8+1WXb+ibg//ZP218CVCtCHkB94wAAAABJRU5ErkJggg=='
submit_bit_light='iVBORw0KGgoAAAANSUhEUgAAAG4AAAAVCAMAAACQYCvLAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAG9QTFRFIiIiPj4+goKCkJCQrKysyMjIdHR0MDAwZ2dnurq6////TExM8fHx8vLyWVlZu7u7ra2tg4ODkZGR5OTk1tbWn5+fdXV14+Pj1dXV+vr6k5OTvLy8wcHBhISEnp6et7e38/PzZmZmsrKy+fn5mJiYnZlxrQAAAi9JREFUeJztVNuW2yAMhDgEKmx8wcZpu5fe/v8bqxE4tpOe7OZhn7acY5BhpIGRQKlP0fShOppjddKP+lWmsvch9lQd9mHdF1ra8SFCX1ND9X2+wFHb7UTHEw1//RC5D+9nszWRHql/k85s/icmS0aI7Eg0vyHOpiUE6qh7iE4Om+mU4yF763CPVstii0BTDuZXvLZb4BUdfoeFDtxnHlwNw7M1YjXV7BFqyIZ/N+fFBoEMr6te8JJ3mKaaacLx2Z73dI6yU6bjaMQu3EdOpBd+owbMau40/mcpKiNrk4qUZH2MUjRDccV6QlHEPZ1FlaSFDqNHCURrYwlZ6JRAwNSDOU+YQI3VAuJAncquRUBmaq7FVL41q5gYrRN9UUM7urjQZVhW/lwOl1DhtaRmKuURpBCu6aQtdNiQuA8iqd+KySLaHd1XiJXyTQqio/omrivdYivgbujsJfoguoS00hlUsMt0zaVHFX4XZ8149bSheN7Yen+fCx1qxEmKsyKHeqXjKjIvdMlarh2546OMwFe0EfBVrli2e/qHmPwo4cFBnNnipNSiC6jFk7x03SqmO/7g480/ZXeM9xh+8VQtj+LZN7+BehF77m7oOO0cH+oMcghqnJe80Gikd0GX3GXAkDKuBagGQJeVSdz/iN2LvX+Lp+xoisI90tICYltswY8UO1uAYx4iJz/wPpqh0MtOFT+80amhodGrPqKUkthXzYfds6Xf+1SXbeubgP/bh7a//1AqOUlMDHYAAAAASUVORK5CYII='

submit_image_l = PhotoImage(data=submit_bit_dark)
submit_image_d = PhotoImage(data=submit_bit_light)

border_for_submit_btn = Frame(canvas,background='#ffffff')
submit_btn = Button(border_for_submit_btn,
image=submit_image_l,
bg='#1B1B1B',
fg='#ffffff',
activebackground='#1B1B1B',
activeforeground='#141414',
bd=0,
relief=FLAT,
anchor=CENTER,
command=downloader_thread_event.set
)
submit_btn.place(x=1,y=1,height=58, width=118)
border_for_submit_btn.place(x=320,y=115,height=60, width=120)


def change_sb_color_onhover(e):
    global submit_btn
    submit_btn.configure(image=submit_image_d, bg='#222222')
def return_sb_color_onhover(e):
    global submit_btn
    submit_btn.configure(image=submit_image_l, bg='#1B1B1B')
def on_click_submit_btn(e):
    global submit_btn
    submit_btn.configure(image=submit_image_l)
def on_release_submit_btn(e):
    global submit_btn
    submit_btn.configure(image=submit_image_d)

submit_btn.bind("<Enter>", change_sb_color_onhover)
submit_btn.bind("<Leave>", return_sb_color_onhover)
submit_btn.bind("<ButtonPress-1>", on_click_submit_btn)
submit_btn.bind("<ButtonRelease-1>", on_release_submit_btn)

# Exit Button
exit_button = Button(brain,
text='╳',
bd=0,
repeatdelay=1,
fg='#ffffff',
bg='#141414',
relief=FLAT,
activebackground='#141414',
highlightthickness=0,
padx=5,
pady=3,
command=brain.quit
)
exit_button.place(x=428,y=0)

def changex_on_hovering(event):
    global exit_button
    exit_button.configure(bg='red')
def returnx_to_normalstate(event):
    global exit_button
    exit_button.configure(bg='#141414')
exit_button.bind('<Enter>',changex_on_hovering)
exit_button.bind('<Leave>',returnx_to_normalstate)

# Minimize Button
def minimize():
    brain.overrideredirect(False)
    brain.iconify()
def deminimize(e):
    brain.overrideredirect(True)

minimize_button = Button(brain,
text='—',
bd=0,
repeatdelay=1,
fg='#ffffff',
bg='#141414',
relief=FLAT,
activebackground='#141414',
highlightthickness=0,
padx=5,
pady=3,
command=minimize
)
minimize_button.place(x=398,y=0)

def changem_color_on_hovering(event):
    global minimize_button
    minimize_button.configure(bg='#545454')
def returnm_color_on_hovering(event):
    global minimize_button
    minimize_button.configure(bg='#141414')

minimize_button.bind('<Enter>', changem_color_on_hovering)
minimize_button.bind('<Leave>', returnm_color_on_hovering)

title_bar.bind("<Map>",deminimize)

# Start Main loop
if __name__ == "__main__":
    brain.mainloop()
